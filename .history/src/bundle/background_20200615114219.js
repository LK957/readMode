webpackJsonp([0],{

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar _local = __webpack_require__(1);\n\nvar _local2 = _interopRequireDefault(_local);\n\nvar _storage = __webpack_require__(2);\n\nvar _message = __webpack_require__(339);\n\nvar msg = _interopRequireWildcard(_message);\n\nvar _browser = __webpack_require__(334);\n\nvar _version = __webpack_require__(335);\n\nvar ver = _interopRequireWildcard(_version);\n\nvar _menu = __webpack_require__(340);\n\nvar menu = _interopRequireWildcard(_menu);\n\nvar _watch = __webpack_require__(341);\n\nvar watch = _interopRequireWildcard(_watch);\n\nvar _webdav = __webpack_require__(342);\n\nvar WebDAV = _interopRequireWildcard(_webdav);\n\nvar _permission = __webpack_require__(343);\n\nvar permission = _interopRequireWildcard(_permission);\n\nvar _tips = __webpack_require__(344);\n\nvar tips = _interopRequireWildcard(_tips);\n\nvar _puread = __webpack_require__(345);\n\nvar _puread2 = _interopRequireDefault(_puread);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconsole.log(\"=== simpread background load ===\");\n\n// global update site tab id\nvar upTabId = -1;\n\n/**\r\n * Sevice: storage Get data form chrome storage\r\n */\n\nconsole.log('Read-----1--', ver, _storage.storage);\n_storage.storage.Read(function () {\n\n    _storage.storage.puread = new _puread2.default(_storage.storage.sites);\n    console.log('storage.Read--', _local2.default.Firstload(), _local2.default.Count(), ver.version);\n\n    if (_local2.default.Firstload()) {\n        _local2.default.Version(ver.version);\n        // browser.tabs.create({ url: browser.extension.getURL( \"options/options.html#firstload?ver=\" + ver.version ) });\n    } else {\n        !_local2.default.Count() && _storage.storage.GetRemote(\"remote\", function (result, error) {\n            if (!error) {\n                _storage.storage.pr.Addsites(result);\n                _storage.storage.Writesite(_storage.storage.pr.sites, getNewsitesHandler);\n            }\n        });\n        ver.version != _storage.storage.version && _storage.storage.GetRemote(\"local\", function (result, error) {\n            _storage.storage.pr.Addsites(result);\n            _storage.storage.Writesite(_storage.storage.pr.sites, function () {\n                ver.version != _storage.storage.version && _storage.storage.Fix(_storage.storage.read.sites, _storage.storage.version, ver.version, _storage.storage.focus.sites);\n                ver.version != _storage.storage.version && _storage.storage.Write(function () {\n                    _local2.default.Version(ver.version);\n                    // browser.tabs.create({ url: browser.extension.getURL( \"options/options.html#update?ver=\" + ver.version ) });\n                }, ver.Verify(_storage.storage.version, _storage.storage.simpread));\n                getNewsitesHandler(result);\n            });\n        });\n        console.log(ver.version == _storage.storage.version && ver.patch != _storage.storage.patch);\n\n        ver.version == _storage.storage.version && ver.patch != _storage.storage.patch && _storage.storage.Write(function () {\n            _browser.browser.tabs.create({ url: _browser.browser.extension.getURL(\"options/options.html#update?patch=\" + ver.patch) });\n        }, ver.FixSubver(ver.patch, _storage.storage.simpread));\n    }\n\n    console.log('Read-------', ver, _storage.storage);\n    setTimeout(function () {\n        return uninstall();\n    }, 100);\n});\n\n/**\r\n * Get newsites handler\r\n * @param {object} count: update site cou\r\n */\nfunction getNewsitesHandler(result) {\n    watch.Push(\"site\", true);\n}\n\n/**\r\n * Listen menu event handler\r\n */\nmenu.OnClicked(function (info, tab) {\n    console.log(\"background contentmenu Listener\", info, tab, msg.Add(info.menuItemId));\n\n    if (info.menuItemId == \"read\" && !tab.url.startsWith(\"chrome://\")) _browser.browser.tabs.sendMessage(tab.id, msg.Add(info.menuItemId));\n    tracked({ eventCategory: \"menu\", eventAction: \"menu\", eventValue: info.menuItemId });\n    return false;\n    if (info.menuItemId == \"link\") {\n        info.linkUrl && _browser.browser.tabs.create({ url: info.linkUrl + \"?simpread_mode=read\" });\n    } else if (info.menuItemId == \"list\") {\n        _browser.browser.tabs.create({ url: _browser.browser.extension.getURL(\"options/options.html#later\") });\n    } else if (info.menuItemId == \"whitelist\") {\n        _browser.browser.tabs.sendMessage(tab.id, msg.Add(msg.MESSAGE_ACTION.menu_whitelist, { url: info.pageUrl }));\n    } else if (info.menuItemId == \"exclusion\") {\n        _browser.browser.tabs.sendMessage(tab.id, msg.Add(msg.MESSAGE_ACTION.menu_exclusion, { url: info.pageUrl }));\n    } else if (info.menuItemId == \"blacklist\") {\n        _browser.browser.tabs.sendMessage(tab.id, msg.Add(msg.MESSAGE_ACTION.menu_blacklist, { url: info.pageUrl }));\n    } else if (info.menuItemId == \"unrdist\") {\n        _browser.browser.tabs.sendMessage(tab.id, msg.Add(msg.MESSAGE_ACTION.menu_unrdist, { url: info.pageUrl }));\n    } else if (info.menuItemId == \"lazyload\") {\n        _browser.browser.tabs.sendMessage(tab.id, msg.Add(msg.MESSAGE_ACTION.menu_lazyload, { url: info.pageUrl }));\n    } else {\n        if (!tab.url.startsWith(\"chrome://\")) _browser.browser.tabs.sendMessage(tab.id, msg.Add(info.menuItemId));\n    }\n});\n\n/**\r\n * Listen runtime message, include: `corb`\r\n */\n_browser.browser.runtime.onMessage.addListener(function (request, sender, sendResponse) {\n    if (request.type == msg.MESSAGE_ACTION.CORB) {\n        $.ajax(request.value.settings).done(function (result) {\n            sendResponse({ done: result });\n        }).fail(function (jqXHR, textStatus, errorThrown) {\n            sendResponse({ fail: { jqXHR: jqXHR, textStatus: textStatus, errorThrown: errorThrown } });\n        });\n    }\n    return true;\n});\n\n/**\r\n * Listen runtime message, include: `jianguo`\r\n */\n_browser.browser.runtime.onMessage.addListener(function (request, sender, sendResponse) {\n    if (request.type == msg.MESSAGE_ACTION.jianguo) {\n        var _request$value = request.value,\n            url = _request$value.url,\n            user = _request$value.user,\n            password = _request$value.password,\n            method = _request$value.method;\n\n        var dav = new WebDAV.Fs(url, user, password);\n        if (method.type == \"folder\") {\n            dav.dir(method.root).mkdir(function (result) {\n                dav.dir(method.root + \"/\" + method.folder).mkdir(function (result) {\n                    sendResponse({ done: result, status: result.status });\n                });\n            });\n        } else if (method.type == \"file\") {\n            dav.file(method.path).write(method.content, function (result) {\n                sendResponse({ done: result, status: result.status });\n            });\n        } else if (method.type == \"read\") {\n            dav.file(method.path).read(function (result) {\n                sendResponse({ done: result.response, status: result.status });\n            });\n        }\n    }\n    //return true;\n});\n\n/**\r\n * Listen runtime message, include: `webdav`\r\n */\n_browser.browser.runtime.onMessage.addListener(function (request, sender, sendResponse) {\n    if (request.type == msg.MESSAGE_ACTION.WebDAV) {\n        var _request$value2 = request.value,\n            url = _request$value2.url,\n            user = _request$value2.user,\n            password = _request$value2.password,\n            method = _request$value2.method;\n\n        var dav = new WebDAV.Fs(url, user, password);\n        if (method.type == \"folder\") {\n            dav.dir(method.root).mkdir(function (result) {\n                sendResponse({ done: result, status: result.status });\n            });\n        } else if (method.type == \"file\") {\n            dav.file(method.root + \"/\" + method.name).write(method.content, function (result) {\n                sendResponse({ done: result, status: result.status });\n            });\n        }\n    }\n    //return true;\n});\n\n/**\r\n * Listen runtime message, include: `download`, `base64` && `permission`\r\n */\n_browser.browser.runtime.onMessage.addListener(function (request, sender, sendResponse) {\n    if (request.type == msg.MESSAGE_ACTION.download) {\n        var _request$value3 = request.value,\n            data = _request$value3.data,\n            name = _request$value3.name;\n\n        var blob = new Blob([data], {\n            type: \"html/plain;charset=utf-8\"\n        });\n        var url = URL.createObjectURL(blob);\n        _browser.browser.downloads.download({\n            url: url,\n            filename: name.replace(/[|]/ig, \"\")\n        }, function (downloadId) {\n            sendResponse({ done: downloadId });\n        });\n    } else if (request.type == msg.MESSAGE_ACTION.base64) {\n        var _url = request.value.url;\n\n        fetch(_url).then(function (response) {\n            return response.blob();\n        }).then(function (blob) {\n            return new Promise(function (resolve, reject) {\n                var reader = new FileReader();\n                reader.onloadend = function (event) {\n                    sendResponse({ done: { url: _url, uri: event.target.result } });\n                };\n                reader.onerror = function (error) {\n                    sendResponse({ fail: { error: error, url: _url } });\n                };\n                reader.readAsDataURL(blob);\n            });\n        }).catch(function (error) {\n            sendResponse({ fail: { error: error, url: _url } });\n        });\n    } else if (request.type == msg.MESSAGE_ACTION.permission) {\n        permission.Get({ permissions: [\"downloads\"] }, function (result) {\n            sendResponse({ done: result });\n        });\n    }\n    return true;\n});\n\n/**\r\n * Listen runtime message, include: `snapshot`\r\n */\n_browser.browser.runtime.onMessage.addListener(function (request, sender, sendResponse) {\n    if (request.type == msg.MESSAGE_ACTION.snapshot) {\n        console.log(\"222background runtime Listener\", request);\n        var _request$value4 = request.value,\n            left = _request$value4.left,\n            top = _request$value4.top,\n            width = _request$value4.width,\n            height = _request$value4.height;\n\n        chrome.tabs.captureVisibleTab({ format: \"png\" }, function (base64) {\n            var image = new Image();\n            image.src = base64;\n            image.onload = function () {\n                var canvas = document.createElement(\"canvas\"),\n                    ctx = canvas.getContext(\"2d\"),\n                    dpi = window.devicePixelRatio,\n                    sx = left * dpi,\n                    sy = top * dpi,\n                    sWidth = width * dpi,\n                    sHeight = height * dpi;\n                canvas.width = sWidth;\n                canvas.height = sHeight;\n                ctx.drawImage(image, sx, sy, sWidth, height * dpi, 0, 0, sWidth, sHeight);\n                var uri = canvas.toDataURL(\"image/png\");\n                sendResponse({ done: uri });\n            };\n        });\n    }\n    return true;\n});\n\n/**\r\n * Listen runtime message\r\n */\n_browser.browser.runtime.onMessage.addListener(function (request, sender, sendResponse) {\n    console.log(\"background runtime Listener\", request);\n    switch (request.type) {\n\n        case msg.MESSAGE_ACTION.set_read_mode:\n            var _request$value5 = request.value,\n                whitelist = _request$value5.whitelist,\n                auto = _request$value5.auto;\n\n            _storage.storage.read.whitelist = whitelist;\n            if (auto !== undefined) _storage.storage.read.auto = auto;\n            _storage.storage.Write(function () {\n                watch.SendMessage(\"option\", true);\n                console.log(_storage.storage.read.whitelist);\n            });\n\n            break;\n        case msg.MESSAGE_ACTION.get_read_mode:\n            var name = \"xbread\";\n            _browser.browser.storage.local.get([name], function (result) {\n                var readMode = result[name].read;\n                sendResponse(readMode);\n            });\n            break;\n        case msg.MESSAGE_ACTION.icon_code:\n            _storage.storage.iconCode(sendResponse);\n            break;\n        case msg.MESSAGE_ACTION.shortcuts:\n            getCurTab({ url: request.value.url }, function (tabs) {\n                _browser.browser.tabs.sendMessage(tabs[0].id, msg.Add(msg.MESSAGE_ACTION.shortcuts));\n            });\n            break;\n        case msg.MESSAGE_ACTION.browser_action:\n            getCurTab({ url: request.value.url }, function (tabs) {\n                if (tabs && tabs.length > 0 && tabs[0].url == request.value.url) {\n                    console.log(1, 'set--MenuAndIcon', tabs[0].id, request.value.code);\n\n                    setMenuAndIcon(tabs[0].id, request.value.code);\n                } else console.error(request);\n            });\n            break;\n        case msg.MESSAGE_ACTION.new_tab:\n            _browser.browser.tabs.create({ url: request.value.url });\n            break;\n        case msg.MESSAGE_ACTION.close_tab:\n            getCurTab({ \"active\": true }, function (tabs) {\n                tabs.forEach(function (tab) {\n                    tab.active && tab.url == request.value.url && _browser.browser.tabs.remove(tab.id);\n                });\n            });\n            break;\n        case msg.MESSAGE_ACTION.menu:\n            var _request$value6 = request.value,\n                id = _request$value6.id,\n                value = _request$value6.value;\n            // hack code refresh options menu changed, and not saved storage\n\n            _storage.storage.option.menu[id] = value;\n            value === true ? menu.Create(id) : menu.Remove(id);\n            break;\n        case msg.MESSAGE_ACTION.updated:\n            watch.Push(request.value.type, request.value.value);\n            break;\n        case msg.MESSAGE_ACTION.save_verify:\n            sendResponse(watch.Lock(request.value.url));\n            break;\n        case msg.MESSAGE_ACTION.auth:\n            _browser.browser.tabs.create({ url: _browser.browser.extension.getURL(\"options/options.html#labs?auth=\" + request.value.name.toLowerCase()) });\n            break;\n        case msg.MESSAGE_ACTION.update_site:\n            getCurTab({ active: true, url: request.value.url }, function (tabs) {\n                tabs.length > 0 && (upTabId = tabs[0].id);\n                _browser.browser.tabs.create({ url: _browser.browser.extension.getURL(\"options/options.html#sites?update=\" + encodeURI(JSON.stringify(request.value.site))) });\n            });\n            break;\n        case msg.MESSAGE_ACTION.save_site:\n            _browser.browser.tabs.create({ url: _browser.browser.extension.getURL(\"options/options.html#sites?pending=\" + encodeURI(JSON.stringify(request.value))) });\n            break;\n        case msg.MESSAGE_ACTION.temp_site:\n            _browser.browser.tabs.create({ url: _browser.browser.extension.getURL(\"options/options.html#sites?temp=\" + encodeURI(JSON.stringify(request.value))) });\n            break;\n        case msg.MESSAGE_ACTION.auth_success:\n            getCurTab({ url: request.value.url }, function (tabs) {\n                if (tabs && tabs.length > 0) {\n                    _browser.browser.tabs.remove(tabs[0].id);\n                    getCurTab({ \"active\": true }, function (tabs) {\n                        tabs.forEach(function (tab) {\n                            return _browser.browser.tabs.sendMessage(tab.id, msg.Add(msg.MESSAGE_ACTION.export, { type: request.value.name.toLowerCase() }));\n                        });\n                    });\n                }\n            });\n            break;\n        case msg.MESSAGE_ACTION.track:\n            tracked(request.value);\n            break;\n        case msg.MESSAGE_ACTION.speak:\n            _browser.browser.tts.speak(request.value.content);\n            break;\n        case msg.MESSAGE_ACTION.speak_stop:\n            _browser.browser.tts.stop();\n            break;\n        case msg.MESSAGE_ACTION.tips:\n            tips.Verify(request.value.code, sendResponse);\n            break;\n        case msg.MESSAGE_ACTION.tips_norepeat:\n            tips.Done(request.value.code);\n            break;\n        case msg.MESSAGE_ACTION.sites_enabled:\n            console.log(3333333333, request.value);\n\n            break;\n    }\n});\n\n/**\r\n * Listen chrome tab active message, include: `tab_selected`\r\n */\n_browser.browser.tabs.onActivated.addListener(function (active) {\n    console.log('onActivated--', active);\n\n    getCurTab({ \"active\": true, \"currentWindow\": true }, function (tabs) {\n        if (tabs && tabs.length > 0 && tabs[0].status == \"complete\") {\n            console.log(\"background tabs Listener:active\", active);\n            if (!tabs[0].url.startsWith(\"chrome://\")) {\n                console.log(9, msg.Add(msg.MESSAGE_ACTION.tab_selected, { is_update: false }));\n\n                _browser.browser.tabs.sendMessage(tabs[0].id, msg.Add(msg.MESSAGE_ACTION.tab_selected, { is_update: false }));\n            } else {\n                console.log(2, 'set--MenuAndIcon', tabs[0].id, -1);\n                setMenuAndIcon(tabs[0].id, -1);\n            }\n        } else console.error(\"onActivated.addListener error\");\n    });\n});\n\n/**\r\n * Listen chrome tab update message, include: `tab_selected`\r\n */\n_browser.browser.tabs.onUpdated.addListener(function (tabId, changeInfo, tab) {\n    watch.Pull(tabId);\n    if (changeInfo.status == \"complete\") {\n        console.log('onUpdated--', tabId, changeInfo, tab);\n\n        console.log(\"Listener:update\", tab.url, _browser.browser.runtime.getURL(\"options/options.html#sites?update=success\"));\n\n        if (tab.url.startsWith(\"http://ksria.com/simpread/auth.html\")) {\n            var url = tab.url.replace(\"http://ksria.com/simpread/auth.html?id=\", \"\"),\n                id = url.includes(\"#\") || url.includes(\"&\") ? url.substr(0, url.search(/\\S(#|&)/) + 1) : url;\n            _browser.browser.tabs.query({}, function (tabs) {\n                var opts = tabs.find(function (tab) {\n                    return tab.url.includes(_browser.browser.extension.getURL(\"options/options.html\"));\n                });\n                if (opts) {\n                    _browser.browser.tabs.sendMessage(opts.id, msg.Add(msg.MESSAGE_ACTION.redirect_uri, { uri: tab.url, id: id }));\n                    _browser.browser.tabs.remove(tabId);\n                }\n            });\n        } else if (tab.url.startsWith(\"https://simpread.ksria.cn/plugins/install/\")) {\n            var _url2 = tab.url.replace(\"https://simpread.ksria.cn/plugins/install/\", \"\");\n            // browser.tabs.create({ url: browser.extension.getURL( \"options/options.html#plugins?install=\" + encodeURIComponent(url) ) });\n            _browser.browser.tabs.remove(tabId);\n        } else if (tab.url.startsWith(\"https://simpread.ksria.cn/sites/install/\")) {\n            var _url3 = tab.url.replace(\"https://simpread.ksria.cn/sites/install/\", \"\");\n            // browser.tabs.create({ url: browser.extension.getURL( \"options/options.html#sites?install=\" + encodeURIComponent(url) ) });\n            _browser.browser.tabs.remove(tabId);\n        } else if (tab.url == _browser.browser.runtime.getURL(\"options/options.html#sites?update=success\")) {\n            _browser.browser.tabs.remove(tabId);\n            upTabId > 0 && chrome.tabs.reload(upTabId, function () {\n                upTabId == -1;\n            });\n        } else if (tab.url == _browser.browser.runtime.getURL(\"options/options.html#sites?update=failed\")) {\n            _browser.browser.tabs.remove(tabId);\n        } else if (tab.url == _browser.browser.runtime.getURL(\"options/options.html#sites?update=complete\")) {\n            _browser.browser.tabs.remove(tabId);\n        } else if (tab.url == _browser.browser.runtime.getURL(\"options/options.html#sites?update=pending\")) {\n            _browser.browser.tabs.remove(tabId);\n            upTabId > 0 && _browser.browser.tabs.sendMessage(upTabId, msg.Add(msg.MESSAGE_ACTION.pending_site));\n            upTabId == -1;\n        }\n\n        if (!tab.url.startsWith(\"chrome://\")) {\n            _browser.browser.tabs.sendMessage(tabId, msg.Add(msg.MESSAGE_ACTION.tab_selected, { is_update: true }));\n        } else {\n\n            console.log(3, 'set--MenuAndIcon', tab.id, -1);\n            setMenuAndIcon(tab.id, -1);\n        }\n    }\n});\n\n/**\r\n * Listen chrome tab remove message\r\n */\n_browser.browser.tabs.onRemoved.addListener(function (tabId) {\n    console.log('onRemoved--', tabId);\n\n    watch.Pull(tabId);\n});\n\n/**\r\n * Listen chrome page, include: `read`\r\n */\n_browser.browser.pageAction.onClicked.addListener(function (tab) {\n    console.log('===================', tab);\n\n    _browser.browser.tabs.sendMessage(tab.id, msg.Add(msg.MESSAGE_ACTION.browser_click));\n});\n\n/**\r\n * Get current tab object\r\n * \r\n * @param {object}   query\r\n * @param {function} callback\r\n */\nfunction getCurTab(query, callback) {\n    if (query.url && query.url.includes(\"#\")) {\n        _browser.browser.tabs.query({}, function (tabs) {\n            return callback(tabs.filter(function (tab) {\n                return tab.url == query.url && tab.active;\n            }));\n        });\n    } else _browser.browser.tabs.query(query, function (tabs) {\n        callback(tabs);\n    });\n}\n\n/**\r\n * Set page action icon and context menu\r\n * \r\n * @param {int} tab.id\r\n * @param {int} -1: disable icon;\r\n */\nfunction setMenuAndIcon(id, code) {\n    menu.Create(\"read\");\n    _storage.storage.iconCode(null, code);\n\n    var icon = \"\";\n    _browser.browser.pageAction.show(id);\n    if (code == -1) {\n        menu.Update(\"unread\", false);\n    } else {\n        icon = \"-enable\";\n        // storage.option.menu.read === true && menu.Create( \"read\" );\n        menu.Update(\"read\");\n    }\n    _browser.browser.pageAction.setIcon({ tabId: id, path: _browser.browser.extension.getURL('assets/images/icon16' + icon + '.png') });\n}\n\n/**\r\n * Track\r\n * \r\n * @param {object} google analytics track object\r\n */\nfunction tracked(_ref) {\n    var eventCategory = _ref.eventCategory,\n        eventAction = _ref.eventAction,\n        eventValue = _ref.eventValue;\n\n    console.log(\"current track is\", eventCategory, eventAction, eventValue);\n    return;\n    _gaq.push(['_trackEvent', eventCategory, eventValue]);\n}\n\n/**\r\n * Uninstall\r\n */\nfunction uninstall() {\n    _browser.browser.runtime.setUninstallURL(_storage.storage.option.uninstall ? _storage.storage.service + \"/uninstall\" : \"\");\n    tracked({ eventCategory: \"install\", eventAction: \"install\", eventValue: \"uninstall\" });\n}//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 1:
/***/ (function(module, exports) {

	eval("\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nconsole.log(\"=== simpread local load ===\");\n\nvar id = \"XBread\",\n    NAMES = {\n    VER: \"version\",\n    COUNT: \"count\",\n    FIRST: \"firstload\"\n},\n    MAX_COUNT = 5;\n\nvar curcount = void 0;\n\n/**\n * Read and Write Local Storage\n * \n * @class\n */\n\nvar Local = function () {\n    function Local() {\n        _classCallCheck(this, Local);\n    }\n\n    _createClass(Local, [{\n        key: \"Count\",\n\n\n        /**\n         * @method\n         * \n         * @return {boolean} true: not MAX_COUNT; false: exceed MAX_COUNT, re-count\n         */\n        value: function Count() {\n            var _ref = [get(NAMES.COUNT)],\n                _ref$ = _ref[0],\n                cur = _ref$ === undefined ? 0 : _ref$;\n\n            curcount = cur;\n            set(NAMES.COUNT, ++curcount);\n            if (curcount > MAX_COUNT) {\n                set(NAMES.COUNT, 0);\n                return false;\n            } else {\n                return true;\n            }\n        }\n\n        /**\n         * @method\n         * \n         * @return {boolean} true: first load; false: not first load\n         */\n\n    }, {\n        key: \"Firstload\",\n        value: function Firstload() {\n            var _ref2 = [get(NAMES.FIRST)],\n                _ref2$ = _ref2[0],\n                firstload = _ref2$ === undefined ? \"true\" : _ref2$;\n\n            if (firstload == \"true\") {\n                set(NAMES.FIRST, false);\n                return true;\n            } else {\n                return false;\n            }\n        }\n\n        /**\n         * Save manifest.json version to local storage\n         * \n         * @param {string} version\n         */\n\n    }, {\n        key: \"Version\",\n        value: function Version(version) {\n            set(NAMES.VER, version);\n        }\n    }, {\n        key: \"curcount\",\n        get: function get() {\n            return curcount;\n        }\n    }]);\n\n    return Local;\n}();\n\n/**\n * Get localStorage from key\n * \n * @param {string} NAMES.{value}\n */\n\n\nfunction get(key) {\n    return localStorage[id + \"-\" + key];\n}\n\n/**\n * Set localStorage\n * \n * @param {string} NAMES.{value}\n * @param {any}  any value\n */\nfunction set(key, value) {\n    localStorage[id + \"-\" + key] = value;\n}\n\nvar local = new Local();\nexports.default = local;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvc2VydmljZS9sb2NhbC5qcz8wM2ZmIl0sIm5hbWVzIjpbImNvbnNvbGUiLCJsb2ciLCJpZCIsIk5BTUVTIiwiVkVSIiwiQ09VTlQiLCJGSVJTVCIsIk1BWF9DT1VOVCIsImN1cmNvdW50IiwiTG9jYWwiLCJnZXQiLCJjdXIiLCJzZXQiLCJmaXJzdGxvYWQiLCJ2ZXJzaW9uIiwia2V5IiwibG9jYWxTdG9yYWdlIiwidmFsdWUiLCJsb2NhbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBQSxRQUFRQyxHQUFSLENBQWEsNkJBQWI7O0FBRUEsSUFBTUMsS0FBUSxRQUFkO0FBQUEsSUFDTUMsUUFBUTtBQUNOQyxTQUFRLFNBREY7QUFFTkMsV0FBUSxPQUZGO0FBR05DLFdBQVE7QUFIRixDQURkO0FBQUEsSUFNTUMsWUFBWSxDQU5sQjs7QUFRQSxJQUFJQyxpQkFBSjs7QUFFQTs7Ozs7O0lBS01DLEs7Ozs7Ozs7OztBQU1GOzs7OztnQ0FLUTtBQUFBLHVCQUNnQixDQUFFQyxJQUFJUCxNQUFNRSxLQUFWLENBQUYsQ0FEaEI7QUFBQTtBQUFBLGdCQUNJTSxHQURKLHlCQUNVLENBRFY7O0FBRUpILHVCQUFvQkcsR0FBcEI7QUFDQUMsZ0JBQUtULE1BQU1FLEtBQVgsRUFBa0IsRUFBRUcsUUFBcEI7QUFDQSxnQkFBS0EsV0FBV0QsU0FBaEIsRUFBNEI7QUFDeEJLLG9CQUFLVCxNQUFNRSxLQUFYLEVBQWtCLENBQWxCO0FBQ0EsdUJBQU8sS0FBUDtBQUNILGFBSEQsTUFHTztBQUNILHVCQUFPLElBQVA7QUFDSDtBQUNKOztBQUVEOzs7Ozs7OztvQ0FLWTtBQUFBLHdCQUNxQixDQUFFSyxJQUFJUCxNQUFNRyxLQUFWLENBQUYsQ0FEckI7QUFBQTtBQUFBLGdCQUNGTyxTQURFLDBCQUNVLE1BRFY7O0FBRVIsZ0JBQUtBLGFBQWEsTUFBbEIsRUFBMkI7QUFDdkJELG9CQUFLVCxNQUFNRyxLQUFYLEVBQWtCLEtBQWxCO0FBQ0EsdUJBQU8sSUFBUDtBQUNILGFBSEQsTUFHTztBQUNILHVCQUFPLEtBQVA7QUFDSDtBQUNKOztBQUVEOzs7Ozs7OztnQ0FLU1EsTyxFQUFVO0FBQ2ZGLGdCQUFLVCxNQUFNQyxHQUFYLEVBQWdCVSxPQUFoQjtBQUNIOzs7NEJBM0NjO0FBQ1gsbUJBQU9OLFFBQVA7QUFDSDs7Ozs7O0FBNkNMOzs7Ozs7O0FBS0EsU0FBU0UsR0FBVCxDQUFjSyxHQUFkLEVBQW9CO0FBQ2hCLFdBQU9DLGFBQWlCZCxFQUFqQixTQUF1QmEsR0FBdkIsQ0FBUDtBQUNIOztBQUVEOzs7Ozs7QUFNQSxTQUFTSCxHQUFULENBQWNHLEdBQWQsRUFBbUJFLEtBQW5CLEVBQTJCO0FBQ3ZCRCxpQkFBaUJkLEVBQWpCLFNBQXVCYSxHQUF2QixJQUFpQ0UsS0FBakM7QUFDSDs7QUFFRCxJQUFNQyxRQUFRLElBQUlULEtBQUosRUFBZDtrQkFDZVMsSyIsImZpbGUiOiIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc29sZS5sb2coIFwiPT09IHNpbXByZWFkIGxvY2FsIGxvYWQgPT09XCIgKVxuXG5jb25zdCBpZCAgICA9IFwiWEJyZWFkXCIsXG4gICAgICBOQU1FUyA9IHtcbiAgICAgICAgVkVSICAgOiBcInZlcnNpb25cIixcbiAgICAgICAgQ09VTlQgOiBcImNvdW50XCIsXG4gICAgICAgIEZJUlNUIDogXCJmaXJzdGxvYWRcIixcbiAgICAgIH0sXG4gICAgICBNQVhfQ09VTlQgPSA1O1xuXG5sZXQgY3VyY291bnQ7XG5cbi8qKlxuICogUmVhZCBhbmQgV3JpdGUgTG9jYWwgU3RvcmFnZVxuICogXG4gKiBAY2xhc3NcbiAqL1xuY2xhc3MgTG9jYWwge1xuXG4gICAgZ2V0IGN1cmNvdW50KCkge1xuICAgICAgICByZXR1cm4gY3VyY291bnQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQG1ldGhvZFxuICAgICAqIFxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IHRydWU6IG5vdCBNQVhfQ09VTlQ7IGZhbHNlOiBleGNlZWQgTUFYX0NPVU5ULCByZS1jb3VudFxuICAgICAqL1xuICAgIENvdW50KCkge1xuICAgICAgICBjb25zdCBbIGN1ciA9IDAgXSA9IFsgZ2V0KE5BTUVTLkNPVU5UKSBdO1xuICAgICAgICBjdXJjb3VudCAgICAgICAgICA9IGN1cjtcbiAgICAgICAgc2V0KCBOQU1FUy5DT1VOVCwgKytjdXJjb3VudCApO1xuICAgICAgICBpZiAoIGN1cmNvdW50ID4gTUFYX0NPVU5UICkge1xuICAgICAgICAgICAgc2V0KCBOQU1FUy5DT1VOVCwgMCApO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAbWV0aG9kXG4gICAgICogXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gdHJ1ZTogZmlyc3QgbG9hZDsgZmFsc2U6IG5vdCBmaXJzdCBsb2FkXG4gICAgICovXG4gICAgRmlyc3Rsb2FkKCkge1xuICAgICAgICBsZXQgWyBmaXJzdGxvYWQgPSBcInRydWVcIiBdID0gWyBnZXQoTkFNRVMuRklSU1QpIF07XG4gICAgICAgIGlmICggZmlyc3Rsb2FkID09IFwidHJ1ZVwiICkge1xuICAgICAgICAgICAgc2V0KCBOQU1FUy5GSVJTVCwgZmFsc2UgKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2F2ZSBtYW5pZmVzdC5qc29uIHZlcnNpb24gdG8gbG9jYWwgc3RvcmFnZVxuICAgICAqIFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2ZXJzaW9uXG4gICAgICovXG4gICAgVmVyc2lvbiggdmVyc2lvbiApIHtcbiAgICAgICAgc2V0KCBOQU1FUy5WRVIsIHZlcnNpb24gKTtcbiAgICB9XG5cbn1cblxuLyoqXG4gKiBHZXQgbG9jYWxTdG9yYWdlIGZyb20ga2V5XG4gKiBcbiAqIEBwYXJhbSB7c3RyaW5nfSBOQU1FUy57dmFsdWV9XG4gKi9cbmZ1bmN0aW9uIGdldCgga2V5ICkge1xuICAgIHJldHVybiBsb2NhbFN0b3JhZ2VbIGAke2lkfS0ke2tleX1gIF07XG59XG5cbi8qKlxuICogU2V0IGxvY2FsU3RvcmFnZVxuICogXG4gKiBAcGFyYW0ge3N0cmluZ30gTkFNRVMue3ZhbHVlfVxuICogQHBhcmFtIHthbnl9ICBhbnkgdmFsdWVcbiAqL1xuZnVuY3Rpb24gc2V0KCBrZXksIHZhbHVlICkge1xuICAgIGxvY2FsU3RvcmFnZVsgYCR7aWR9LSR7a2V5fWAgXSA9IHZhbHVlO1xufVxuXG5jb25zdCBsb2NhbCA9IG5ldyBMb2NhbCgpO1xuZXhwb3J0IGRlZmF1bHQgbG9jYWw7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL3NlcnZpY2UvbG9jYWwuanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),

/***/ 342:
/***/ (function(module, exports, __webpack_require__) {

	eval("'use strict';\n\n/* A simple WebDav implementation in JavaScript\n   https://github.com/aslakhellesoy/webdavjs @license MIT\n*/\nvar WebDAV = {\n    GET: function GET(url, callback) {\n        return this.request('GET', url, {}, null, 'text', callback);\n    },\n\n    PROPFIND: function PROPFIND(url, callback) {\n        return this.request('PROPFIND', url, {\n            Depth: \"1\"\n        }, null, 'xml', callback);\n    },\n\n    MKCOL: function MKCOL(url, callback) {\n        return this.request('MKCOL', url, {}, null, 'text', callback);\n    },\n\n    DELETE: function DELETE(url, callback) {\n        return this.request('DELETE', url, {}, null, 'text', callback);\n    },\n\n    PUT: function PUT(url, data, callback) {\n        return this.request('PUT', url, {}, data, 'text', callback);\n    },\n\n    Author: function Author(user, password) {\n        this.user = user;\n        this.password = password;\n    },\n\n    request: function request(verb, url, headers, data, type, callback) {\n        var xhr = new XMLHttpRequest();\n        var body = function body() {\n            var b = xhr.responseText;\n            if (type == 'xml') {\n                var xml = xhr.responseXML;\n                if (xml) {\n                    b = xml.firstChild.nextSibling ? xml.firstChild.nextSibling : xml.firstChild;\n                }\n            }\n            return b;\n        };\n\n        if (callback) {\n            xhr.onreadystatechange = function () {\n                if (xhr.readyState === XMLHttpRequest.DONE && verb == \"PROPFIND\") {\n                    var b = body();\n                    if (b) {\n                        callback(b);\n                    }\n                } else if (xhr.readyState === XMLHttpRequest.DONE) {\n                    callback(xhr);\n                }\n            };\n        }\n        xhr.open(verb, url, !!callback);\n        xhr.setRequestHeader(\"Content-Type\", \"text/xml; charset=UTF-8\");\n        this.user && this.password && xhr.setRequestHeader(\"Authorization\", \"Basic \" + btoa(this.user + \":\" + this.password));\n        for (var header in headers) {\n            xhr.setRequestHeader(header, headers[header]);\n        }\n        xhr.send(data);\n\n        if (!callback) {\n            return body();\n        }\n    }\n};\n\n// An Object-oriented API around WebDAV.\nWebDAV.Fs = function (rootUrl, user, password) {\n    WebDAV.Author(user, password);\n    this.rootUrl = rootUrl;\n    var fs = this;\n\n    this.file = function (href) {\n        this.type = 'file';\n\n        this.url = fs.urlFor(href);\n\n        this.name = fs.nameFor(this.url);\n\n        this.read = function (callback) {\n            return WebDAV.GET(this.url, callback);\n        };\n\n        this.write = function (data, callback) {\n            return WebDAV.PUT(this.url, data, callback);\n        };\n\n        this.rm = function (callback) {\n            return WebDAV.DELETE(this.url, callback);\n        };\n\n        return this;\n    };\n\n    this.dir = function (href) {\n        this.type = 'dir';\n\n        this.url = fs.urlFor(href);\n\n        this.name = fs.nameFor(this.url);\n\n        this.children = function (callback) {\n            var childrenFunc = function childrenFunc(doc) {\n                if (doc.childNodes == null) {\n                    throw 'No such directory: ' + url;\n                }\n                var result = [];\n                // Start at 1, because the 0th is the same as self.\n                for (var i = 1; i < doc.childNodes.length; i++) {\n                    var response = doc.childNodes[i];\n                    var href = decodeURI(response.getElementsByTagName('d:href')[0].firstChild.nodeValue.replace(/\\/$/, ''));\n                    var propstat = response.getElementsByTagName('d:propstat')[0];\n                    var prop = propstat.getElementsByTagName('d:prop')[0];\n                    var resourcetype = prop.getElementsByTagName('d:resourcetype')[0];\n                    var collection = resourcetype.getElementsByTagName('d:collection')[0];\n\n                    if (collection) {\n                        result[i - 1] = new fs.dir(href);\n                    } else {\n                        result[i - 1] = new fs.file(href);\n                    }\n                }\n                return result;\n            };\n\n            if (callback) {\n                WebDAV.PROPFIND(this.url, function (doc) {\n                    callback(childrenFunc(doc));\n                });\n            } else {\n                return childrenFunc(WebDAV.PROPFIND(this.url));\n            }\n        };\n\n        this.rm = function (callback) {\n            return WebDAV.DELETE(this.url, callback);\n        };\n\n        this.mkdir = function (callback) {\n            return WebDAV.MKCOL(this.url, callback);\n        };\n\n        return this;\n    };\n\n    this.urlFor = function (href) {\n        return (/^http/.test(href) ? href : this.rootUrl + href\n        );\n    };\n\n    this.nameFor = function (url) {\n        return url.replace(/.*\\/(.*)/, '$1');\n    };\n\n    return this;\n};\n\nif (true) {\n    module.exports = WebDAV;\n}//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 343:
/***/ (function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.Remove = exports.Get = undefined;\n\nvar _browser = __webpack_require__(334);\n\nfunction Get(permissions, callback) {\n    _browser.browser.permissions.contains({ permissions: permissions.permissions }, function (result) {\n        result == false ? chrome.permissions.request(permissions, function (granted) {\n            callback(granted);\n        }) : callback(result);\n    });\n}\n\nfunction Remove(permissions, callback) {\n    _browser.browser.permissions.remove({ permissions: permissions.permissions }, function (result) {\n        callback(result);\n    });\n}\n\nexports.Get = Get;\nexports.Remove = Remove;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvc2VydmljZS9wZXJtaXNzaW9uLmpzPzhkYmQiXSwibmFtZXMiOlsiR2V0IiwicGVybWlzc2lvbnMiLCJjYWxsYmFjayIsImJyb3dzZXIiLCJjb250YWlucyIsInJlc3VsdCIsImNocm9tZSIsInJlcXVlc3QiLCJncmFudGVkIiwiUmVtb3ZlIiwicmVtb3ZlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQ0E7O0FBRUEsU0FBU0EsR0FBVCxDQUFjQyxXQUFkLEVBQTJCQyxRQUEzQixFQUFzQztBQUNsQ0MscUJBQVFGLFdBQVIsQ0FBb0JHLFFBQXBCLENBQTZCLEVBQUVILGFBQWFBLFlBQVlBLFdBQTNCLEVBQTdCLEVBQXVFLGtCQUFVO0FBQzdFSSxrQkFBVSxLQUFWLEdBQWtCQyxPQUFPTCxXQUFQLENBQW1CTSxPQUFuQixDQUE0Qk4sV0FBNUIsRUFBeUMsbUJBQVc7QUFDbEVDLHFCQUFVTSxPQUFWO0FBQ0gsU0FGaUIsQ0FBbEIsR0FFSU4sU0FBVUcsTUFBVixDQUZKO0FBR0gsS0FKRDtBQUtIOztBQUVELFNBQVNJLE1BQVQsQ0FBaUJSLFdBQWpCLEVBQThCQyxRQUE5QixFQUF5QztBQUNyQ0MscUJBQVFGLFdBQVIsQ0FBb0JTLE1BQXBCLENBQTRCLEVBQUVULGFBQWFBLFlBQVlBLFdBQTNCLEVBQTVCLEVBQXNFLGtCQUFVO0FBQzVFQyxpQkFBVUcsTUFBVjtBQUNILEtBRkQ7QUFHSDs7UUFHR0wsRyxHQUFBQSxHO1FBQ0FTLE0sR0FBQUEsTSIsImZpbGUiOiIzNDMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7YnJvd3Nlcn0gZnJvbSAnYnJvd3Nlcic7XG5cbmZ1bmN0aW9uIEdldCggcGVybWlzc2lvbnMsIGNhbGxiYWNrICkge1xuICAgIGJyb3dzZXIucGVybWlzc2lvbnMuY29udGFpbnMoeyBwZXJtaXNzaW9uczogcGVybWlzc2lvbnMucGVybWlzc2lvbnMgfSwgcmVzdWx0ID0+IHtcbiAgICAgICAgcmVzdWx0ID09IGZhbHNlID8gY2hyb21lLnBlcm1pc3Npb25zLnJlcXVlc3QoIHBlcm1pc3Npb25zLCBncmFudGVkID0+IHtcbiAgICAgICAgICAgIGNhbGxiYWNrKCBncmFudGVkICk7XG4gICAgICAgIH0pOiBjYWxsYmFjayggcmVzdWx0ICk7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIFJlbW92ZSggcGVybWlzc2lvbnMsIGNhbGxiYWNrICkge1xuICAgIGJyb3dzZXIucGVybWlzc2lvbnMucmVtb3ZlKCB7IHBlcm1pc3Npb25zOiBwZXJtaXNzaW9ucy5wZXJtaXNzaW9ucyB9LCByZXN1bHQgPT4ge1xuICAgICAgICBjYWxsYmFjayggcmVzdWx0IClcbiAgICB9KVxufVxuXG5leHBvcnQge1xuICAgIEdldCxcbiAgICBSZW1vdmVcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvc2VydmljZS9wZXJtaXNzaW9uLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),

/***/ 344:
/***/ (function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.Help = exports.Done = exports.Verify = exports.Render = undefined;\n\nvar _notify = __webpack_require__(336);\n\nvar _notify2 = _interopRequireDefault(_notify);\n\nvar _message = __webpack_require__(339);\n\nvar msg = _interopRequireWildcard(_message);\n\nvar _browser = __webpack_require__(334);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconsole.log(\"=== simpread tips load ===\");\n\n/**\n * Verify current page and some plugin exist\n * \n * @param {array} plugins ids\n */\nfunction Render(plugins) {\n    return false;\n    var notify = function notify(code) {\n        new _notify2.default().Render(messages[code], \"不再提示\", function () {\n            _browser.browser.runtime.sendMessage(msg.Add(msg.MESSAGE_ACTION.tips_norepeat, { code: code }));\n        });\n    },\n        pushMessage = function pushMessage(code) {\n        _browser.browser.runtime.sendMessage(msg.Add(msg.MESSAGE_ACTION.tips, { code: code }), function (result) {\n            if (result) {\n                notify(code);\n            }\n        });\n    },\n        messages = {\n        \"klGUASLasg\": '检测到当前环境有代码段，请使用      <a target=\"blank\" href=\"https://simpread.ksria.cn/plugins/details/klGUASLasg\">代码增强插件</a> 辅助阅读',\n        \"VQOZdNET2d\": '检测到当前环境有大量的图片，可以使用 <a target=\"blank\" href=\"https://simpread.ksria.cn/plugins/details/VQOZdNET2d\">点击查看大图</a> 辅助阅读',\n        \"DxlFcL52iy\": '如果你想换个论坛类页面风格，可以使用 <a target=\"blank\" href=\"https://simpread.ksria.cn/plugins/details/DxlFcL52iy\">Materail Design 风格</a> 辅助阅读'\n        // verify klGUASLasg\n    };if ($(\"sr-read\").find(\"pre\").length > 0 && plugins.findIndex(function (item) {\n        return item == \"klGUASLasg\";\n    }) == -1) {\n        pushMessage(\"klGUASLasg\");\n    }\n    // verify VQOZdNET2d\n    if ($(\"sr-read\").find(\"img\").length > 5 && plugins.findIndex(function (item) {\n        return item == \"VQOZdNET2d\";\n    }) == -1) {\n        pushMessage(\"VQOZdNET2d\");\n    }\n    // verify DxlFcL52iy\n    if (location.hostname == \"www.zhihu.com\" && location.pathname.startsWith(\"/question/\") && plugins.findIndex(function (item) {\n        return item == \"DxlFcL52iy\";\n    }) == -1) {\n        pushMessage(\"DxlFcL52iy\");\n    }\n}\n\n/**\n * Help\n * \n * @param {object} storage.statistics\n */\nfunction Help(statistics) {\n    return false;\n    if (statistics.read == 1) {\n        new _notify2.default().Render({ content: \"嗨，很高兴第一次使用简悦的阅读模式，是否看看新手帮助？\", action: \"我要看\", cancel: \"老司机\", callback: function callback(type) {\n                type == \"action\" && _browser.browser.runtime.sendMessage(msg.Add(msg.MESSAGE_ACTION.new_tab, { url: \"http://ksria.com/simpread/guide/#readmode\" }));\n                type == \"cancel\" && _browser.browser.runtime.sendMessage(msg.Add(msg.MESSAGE_ACTION.tips_norepeat, { code: \"readmode\" }));\n            } });\n    }\n}\n\n/**\n * Background call\n * \n * @param {string} plugin id\n * @param {func} callback true: tips; false: not tip\n */\nfunction Verify(id, callback) {\n    return false;\n    var tips = JSON.parse(localStorage[\"simpread-tips\"] || \"{}\");\n    if (!tips[id]) {\n        callback(true);\n    } else callback(false);\n}\n\n/**\n * Not repeat tips\n * \n * @param {string} tips id\n */\nfunction Done(id) {\n    return false;\n    var tips = JSON.parse(localStorage[\"simpread-tips\"] || \"{}\");\n    tips[id] = true;\n    localStorage.setItem(\"simpread-tips\", JSON.stringify(tips));\n}\n\nexports.Render = Render;\nexports.Verify = Verify;\nexports.Done = Done;\nexports.Help = Help;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 345:
/***/ (function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;\"use strict\";\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n!function (t, e) {\n  \"object\" == ( false ? \"undefined\" : _typeof(exports)) && \"undefined\" != typeof module ? module.exports = e() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (e), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : t.PureRead = e();\n}(undefined, function () {\n  \"use strict\";\n  var t = function t(_t, e) {\n    if (!(_t instanceof e)) throw new TypeError(\"Cannot call a class as a function\");\n  },\n      e = function () {\n    function t(t, e) {\n      for (var r = 0; r < e.length; r++) {\n        var n = e[r];n.enumerable = n.enumerable || !1, n.configurable = !0, \"value\" in n && (n.writable = !0), Object.defineProperty(t, n.key, n);\n      }\n    }return function (e, r, n) {\n      return r && t(e.prototype, r), n && t(e, n), e;\n    };\n  }(),\n      r = Object.assign || function (t) {\n    for (var e = 1; e < arguments.length; e++) {\n      var r = arguments[e];for (var n in r) {\n        Object.prototype.hasOwnProperty.call(r, n) && (t[n] = r[n]);\n      }\n    }return t;\n  },\n      n = function t(e, r, n) {\n    null === e && (e = Function.prototype);var i = Object.getOwnPropertyDescriptor(e, r);if (void 0 === i) {\n      var a = Object.getPrototypeOf(e);return null === a ? void 0 : t(a, r, n);\n    }if (\"value\" in i) return i.value;var o = i.get;return void 0 !== o ? o.call(n) : void 0;\n  },\n      i = function i(t, e) {\n    if (!t) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return !e || \"object\" != (typeof e === \"undefined\" ? \"undefined\" : _typeof(e)) && \"function\" != typeof e ? t : e;\n  },\n      a = function () {\n    return function (t, e) {\n      if (Array.isArray(t)) return t;if (Symbol.iterator in Object(t)) return function (t, e) {\n        var r = [],\n            n = !0,\n            i = !1,\n            a = void 0;try {\n          for (var o, l = t[Symbol.iterator](); !(n = (o = l.next()).done) && (r.push(o.value), !e || r.length !== e); n = !0) {}\n        } catch (t) {\n          i = !0, a = t;\n        } finally {\n          try {\n            !n && l.return && l.return();\n          } finally {\n            if (i) throw a;\n          }\n        }return r;\n      }(t, e);throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    };\n  }(),\n      o = function o(t) {\n    if (Array.isArray(t)) {\n      for (var e = 0, r = Array(t.length); e < t.length; e++) {\n        r[e] = t[e];\n      }return r;\n    }return Array.from(t);\n  };function l(t) {\n    return $.extend(!0, {}, t);\n  }function u(t) {\n    if (document) {\n      var e = document.createElement(\"a\");return e.href = t, e;\n    }var r = t.match(/^(https?\\:)\\/\\/(([^:\\/?#]*)(?:\\:([0-9]+))?)([\\/]{0,1}[^?#]*)(\\?[^#]*|)(#.*|)$/);return r && { href: t, protocol: r[1], host: r[2], hostname: r[3], port: r[4], pathname: r[5], search: r[6], hash: r[7] };\n  }function s(t) {\n    if (\"\" == t) return [0, t];if (h(t)) return [2, t];var e = t.match(/<\\S+ (class|id)=(\"|')?[\\w-_=;:' ]+(\"|')?>?$|<[^/][-_a-zA-Z0-9]+>?$/gi);return e && e.length > 0 ? [1, e] : [-1, void 0];\n  }function c(t) {\n    var e = s(t),\n        r = a(e, 2),\n        n = r[0],\n        i = r[1];if (2 == n) return t;if (1 == n) {\n      var o = i[0].trim().replace(/['\"<>]/g, \"\").replace(/ /gi, \"=\").split(\"=\"),\n          l = a(o, 3),\n          u = l[0],\n          c = l[1],\n          h = l[2];return c ? \"class\" === c.toLowerCase() ? c = u + \".\" + h : \"id\" === c.toLowerCase() && (c = u + \"#\" + h) : c = u, c;\n    }return null;\n  }function h(t) {\n    return (/^(\\[\\[)[\\[{`'/]{1}[ \\S]+[}`'/\\]]\\]\\]{1}($)/g.test(t)\n    );\n  }function d(t) {\n    var e = [t.replace(/(^)\\[\\[|\\]\\]$/g, \"\")],\n        r = e[0],\n        n = e[1];switch (r[0]) {case \"{\":\n        r = r.replace(/^{|}$/g, \"\"), t = new Function(\"return \" + r)(), n = 0;break;case \"'\":\n        t = (t = r.replace(/^'|'$/g, \"\")).match(/^<[a-zA-Z0-9_-]+>/g).join(\"\").replace(/<|>/g, \"\") + \":contains(\" + t.replace(/<[/a-zA-Z0-9_-]+>/g, \"\") + \")\", n = 1;break;case \"/\":\n        t = r.replace(/^\\/|\\/$/g, \"\").replace(/\\\\{2}/g, \"\\\\\").replace(/'/g, '\"'), n = 2;break;case \"[\":\n        r = r.replace(/^{|}$/g, \"\"), t = new Function(\"return \" + r)()[0], n = 3;break;case \"`\":\n        r = p(r = r.replace(/^`|`$/g, \"\")), t = $(r), n = 4;break;default:\n        n = -1;}return [t, n];\n  }function f(t) {\n    try {\n      if (\"\" != t.id) return void 0 == t.id ? \"\" : \"//*[@id='\" + t.id + \"']\";if (t === document.body) return \"/html[1]/\" + t.tagName.toLowerCase();for (var e = 0, r = t.parentNode.childNodes, n = 0; n < r.length; n++) {\n        var i = r[n];if (i === t) return f(t.parentNode) + \"/\" + t.tagName.toLowerCase() + \"[\" + (e + 1) + \"]\";1 === i.nodeType && i.tagName === t.tagName && e++;\n      }\n    } catch (t) {\n      return \"\";\n    }\n  }function p(t) {\n    return document.evaluate(t, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;\n  }var m = { url: \"\", target: \"\", matching: [], name: \"\", title: \"\", desc: \"\", exclude: [], include: \"\", avatar: [], paging: [] },\n      v = void 0,\n      g = void 0,\n      y = void 0,\n      b = void 0,\n      w = function () {\n    function n() {\n      var e,\n          r,\n          i = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : { global: [], custom: [], local: [] };t(this, n), this.url = (r = (e = \"/\" != (e = window.location.pathname) && e.endsWith(\"/\") ? e = e.replace(/\\/$/, \"\") : e).replace(/\\/[%@#.~a-zA-Z0-9_-]+$|^\\/$/g, \"\"), window.location.protocol + \"//\" + window.location.hostname + r + \"/\"), this.sites = i, this.current = {}, this.state = \"none\", this.origins = [], this.mathjax = void 0, b = location.href;\n    }return e(n, [{ key: \"SetURL\", value: function value(t) {\n        var e,\n            r = u(t),\n            n = (e = \"/\" != (e = r.pathname) && e.endsWith(\"/\") ? e = e.replace(/\\/$/, \"\") : e).replace(/\\/[%@#.~a-zA-Z0-9_-]+$|^\\/$/g, \"\");this.url = r.protocol + \"//\" + r.hostname + n + \"/\", b = t;\n      } }, { key: \"SetMinimatch\", value: function value(t) {\n        v = t;\n      } }, { key: \"SetRdability\", value: function value(t) {\n        g = t;\n      } }, { key: \"SetMarkdown\", value: function value(t) {\n        y = t;\n      } }, { key: \"isMathJax\", value: function value() {\n        var t = this;return void 0 == this.mathjax && (this.mathjax = !1, $(\"body\").find(\"script\").each(function (e, r) {\n          r.type.startsWith(\"math\") && (t.mathjax = !0);\n        })), this.mathjax;\n      } }, { key: \"MathJaxMode\", value: function value() {\n        var t = x();if (-1 != t) return this.Newsite(\"read\", t[0].outerHTML), this.dom = t[0], this.state = \"temp\", t;var e = k();if (e && \"\" != e.content) {\n          var r = j(e.content),\n              n = r.id,\n              i = r.cls,\n              a = r.tag;return \"\" != n ? \"<\" + a + ' id=\"' + n + '\">' : \"\" != i ? \"<\" + a + ' class=\"' + i + '\">' : void 0;\n        }\n      } }, { key: \"Readability\", value: function value() {\n        try {\n          var t = k();if (!t || \"\" == t.content) throw \"Readability error\";this.Newsite(\"read\", t.content, t.excerpt);var e = j(t.wrap),\n              r = e.id,\n              n = e.cls,\n              i = e.tag;this.dom = \"\" != r ? $(\"body\").find(\"#\" + r)[0] : \"\" != n ? $(\"body\").find(\".\" + n.replace(/ /gi, \".\"))[0] : $(\"body\").find(\"\" + i)[0], this.state = \"temp\";\n        } catch (t) {\n          var a = x();-1 != a ? (this.Newsite(\"read\", a[0].outerHTML), this.dom = a[0], this.state = \"temp\") : this.current.site = l(m);\n        }\n      } }, { key: \"Getsite\", value: function value(t, e) {\n        return this.sites[t].find(function (t) {\n          return t[0] == e;\n        });\n      } }, { key: \"Getsites\", value: function value() {\n        var t = this,\n            e = [],\n            n = function () {\n          if (v(location.href, \"file://**/*.txt\") || v(location.href, \"http*://**/*.txt\")) return function () {\n            var t = location.pathname.split(\"/\").pop(),\n                e = \"file:\" == location.protocol ? \"local\" : \"remote\",\n                r = { name: \"txtread::\" + e, title: \"<title>\", desc: \"\", include: \"<pre>\", auto: !1, exclude: [] };\"remote\" == e && (r.include = \"\", r.html = $(\"body pre\").html().replace(/\\n/gi, \"<br>\"));return !$(\"title\").html() && $(\"head\").append(\"<title>\" + decodeURI(t.replace(\".txt\", \"\")) + \"</title>\"), r;\n          }();if ($($(\"body\").children()[0]).is(\"pre\") && (v(location.href, \"file://**/*.md\") || v(location.href, \"http*://**/*.md\"))) return function () {\n            var t = location.pathname.split(\"/\").pop(),\n                e = { name: \"txtread::\" + (\"file:\" == location.protocol ? \"local\" : \"remote\"), title: \"<title>\", desc: \"\", include: \"\", auto: !1, exclude: [] },\n                r = new y.default.Converter().makeHtml($(\"body pre\").text());return e.html = r, !$(\"title\").html() && $(\"head\").append(\"<title>\" + decodeURI(t.replace(\".md\", \"\")) + \"</title>\"), e;\n          }();var t = /<\\S+ (class|id)=(\"|')?[\\w-_=;:' ]+(\"|')?>?$|<[^/][-_a-zA-Z0-9]+>?$/gi,\n              e = { name: $(\"meta[name='simpread:name']\").attr(\"content\"), url: $(\"meta[name='simpread:url']\").attr(\"content\"), title: $(\"meta[name='simpread:title']\").attr(\"content\"), desc: $(\"meta[name='simpread:desc']\").attr(\"content\"), include: $(\"meta[name='simpread:include']\").attr(\"content\"), exp: $(\"meta[name='simpread:exclude']\").attr(\"content\"), auto: $(\"meta[name='simpread:auto']\").attr(\"content\"), exclude: [] };if (e.name && e.include) {\n            if (e.url && !v(location.href, e.url)) return;!e.title && (e.title = \"<title>\"), !e.desc && (e.desc = \"\"), !e.exp && (e.exp = \"\"), e.name = \"metaread::\" + e.name, e.auto = \"true\" == e.auto;var r = [\"title\", \"desc\", \"include\", \"exp\"].findIndex(function (r) {\n              return \"\" != e[r] && !e[r].match(t);\n            });return e.exclude.push(e.exp), delete e.exp, -1 == r ? e : void 0;\n          }return;\n        }();if (this.current.url = this.url, n) this.current.auto = n.auto, this.current.url = n.url, delete n.auto, delete n.url, this.current.site = r({}, n), this.current.site.name.startsWith(\"metaread::\") && (this.state = \"meta\"), this.current.site.name.startsWith(\"txtread::\") && (this.state = \"txt\");else if (_(\"local\", new Map(this.sites.local), this.url, e), _(\"global\", new Map(this.sites.global), this.url, e), _(\"person\", new Map(this.sites.person), this.url, e), _(\"custom\", new Map(this.sites.custom), this.url, e), e.length > 0) {\n          var i = void 0;if (e.forEach(function (e) {\n            e[1].active && (i = e, t.current.url = i[0], t.current.site = t.Safesite(r({}, i[1]), i[2], i[0]), t.state = \"adapter\");\n          }), !i) {\n            var a = e[0];a[1].active = !0, this.current.url = a[0], this.current.site = this.Safesite(r({}, a[1]), a[2], a[0]), this.state = \"adapter\";\n          }\n        } else {\n          var o = function () {\n            if (location.pathname.includes(\"thread\") || location.pathname.includes(\"forum.php\")) {\n              if ($(\".t_f\").length > 0 && $(\".favatar\").find(\".authi\").length > 0 && $(\".avatar\").find(\"img\").length > 0) return { avatar: [{ name: \"[[{$('.favatar').find('.authi')}]]\" }, { url: \"[[{$('.avatar').find('img')}]]\" }], include: \"[[{$('.t_f')}]]\" };\n            } else if (/\\/t\\/[\\w-]+\\/\\d+/.test(location.pathname) && $(\"meta[name=generator]\").attr(\"content\").includes(\"discourse\")) return { avatar: [{ name: \"[[{$('.topic-avatar').find('.a[data-user-card]')}]]\" }, { url: \"[[{$('.topic-avatar').find('img')}]]\" }], include: \"[[{$('.cooked')}]]\" };return -1;\n          }();-1 != o ? (this.Newmultisite(\"read\", o), this.state = \"temp\") : this.Readability();\n        }this.current.site.matching = e;\n      } }, { key: \"Addsites\", value: function value(t) {\n        var e = 0;if (0 == this.sites.global.length) this.sites.global = this.Formatsites(t), e = this.sites.global.length;else {\n          var r = function (t, e) {\n            var r = new Map(e),\n                n = [].concat(o(r.keys())),\n                i = 0;return t.map(function (t) {\n              n.includes(t[0]) ? n.includes(t[0]) : i++;\n            }), { count: i, newsites: t };\n          }(this.Formatsites(t), this.sites.global);e = r.count, this.sites.global = r.newsites;\n        }return e;\n      } }, { key: \"Addlocalsites\", value: function value(t) {\n        return this.sites.local = [].concat(o(t)), this.sites.local;\n      } }, { key: \"Addallsites\", value: function value(t) {\n        return this.sites = { global: [].concat(o(t.global)), person: [].concat(o(t.person)), custom: [].concat(o(t.custom)), local: [].concat(o(t.local)) }, this.sites;\n      } }, { key: \"Newsite\", value: function value(t, e, n) {\n        var i = { mode: t, url: window.location.href, site: { name: \"tempread::\" + window.location.host, title: \"<title>\", desc: \"[[{$('meta[name=Description]').attr('content')||$('meta[name=description]').attr('content')}]]\", include: \"\", exclude: [] } };e && (i.site.html = e), this.current.mode = i.mode, this.current.url = i.url, this.current.site = this.Safesite(r({}, i.site), \"local\", i.url), n && (this.current.site.excerpt = n);\n      } }, { key: \"Newmultisite\", value: function value(t, e) {\n        var n = { mode: t, url: window.location.href, site: { name: \"tempread::\" + window.location.host, title: \"<title>\", desc: \"\", include: e.include, exclude: [], avatar: e.avatar } };this.current.mode = n.mode, this.current.url = n.url, this.current.site = this.Safesite(r({}, n.site), \"local\", n.url);\n      } }, { key: \"Updatesite\", value: function value(t, e, r) {\n        var n = this.sites[t].findIndex(function (t) {\n          return t[0] == e;\n        });-1 == n && (n = this.sites[t].length), this.sites[t].splice(n, 1, r);\n      } }, { key: \"Deletesite\", value: function value(t, e, r) {\n        var n = this.sites[t].findIndex(function (t) {\n          return t[0] == e;\n        });-1 != n && this.sites[t].splice(n, 1), r(n);\n      } }, { key: \"Safesite\", value: function value(t, e, r) {\n        return t.url = r, t.target = e, \"\" == t.name && (t.name = \"tempread::\"), (!t.avatar || 0 == t.avatar.length) && (t.avatar = [{ name: \"\" }, { url: \"\" }]), (!t.paging || 0 == t.paging.length) && (t.paging = [{ prev: \"\" }, { next: \"\" }]), t;\n      } }, { key: \"Cleansite\", value: function value(t) {\n        return delete t.url, delete t.html, delete t.target, delete t.matching, t.avatar && t.avatar.length > 0 && \"\" == t.avatar[0].name && delete t.avatar, t.paging && t.paging.length > 0 && \"\" == t.paging[0].prev && delete t.paging, t;\n      } }, { key: \"Formatsites\", value: function value(t) {\n        var e = new Map(),\n            r = !0,\n            n = !1,\n            i = void 0;try {\n          for (var a, l = t.sites[Symbol.iterator](); !(r = (a = l.next()).done); r = !0) {\n            var u = a.value;if (0 == O(u)) {\n              var s = u.url;delete u.url, e.set(s, u);\n            }\n          }\n        } catch (t) {\n          n = !0, i = t;\n        } finally {\n          try {\n            !r && l.return && l.return();\n          } finally {\n            if (n) throw i;\n          }\n        }return [].concat(o(e));\n      } }, { key: \"Clearsites\", value: function value(t) {\n        t ? this.sites[t] = [] : this.sites = { global: [], custom: [], local: [] };\n      } }, { key: \"Origins\", value: function value(t) {\n        var e = t.origins.map(function (t) {\n          return t.url;\n        });return (e = new Set(this.origins.concat(e))).forEach(function (t) {\n          \"\" != t.trim() && t.trim().startsWith(\"http\") && t.trim().endsWith(\".json\") || e.delete(t);\n        }), this.origins = [].concat(o(e)), this.origins;\n      } }, { key: \"Addorigins\", value: function value(t) {\n        return this.sites.custom = [].concat(o(t)), this.sites.custom;\n      } }, { key: \"Clearorigins\", value: function value() {\n        var t = this.sites.custom.length;return this.sites.custom = [], t;\n      } }]), n;\n  }();function x() {\n    var t = $(\"body\"),\n        e = !0,\n        r = !1,\n        n = void 0;try {\n      for (var i, a = [\"[itemprop='articleBody']\", \"article\", \".post-content\", \".entry-content\", \".post-article\", \".content-post\", \".article-entry\", \".article-content\", \".article-body\", \".markdown-body\", \".post\", \".content\"][Symbol.iterator](); !(e = (i = a.next()).done); e = !0) {\n        var o = i.value,\n            l = t.find(o);if (l.length > 0) return l;\n      }\n    } catch (t) {\n      r = !0, n = t;\n    } finally {\n      try {\n        !e && a.return && a.return();\n      } finally {\n        if (r) throw n;\n      }\n    }return -1;\n  }function k() {\n    var t = document.location,\n        e = (t.href, t.host, t.protocol, t.host, t.protocol.substr(0, t.protocol.indexOf(\":\")), t.protocol, t.host, t.pathname.substr(0, t.pathname.lastIndexOf(\"/\") + 1), new g.Readability(document.cloneNode(!0)).parse());return e;\n  }function _(t, e, r) {\n    var n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : [],\n        i = function i(t) {\n      var e = t.replace(\"www.\", \"\").match(/\\.\\S+\\.\\S+/g);return e ? e[0].substr(1) : t.replace(\"www.\", \"\");\n    },\n        a = u(b),\n        s = [].concat(o(e.keys())),\n        c = r.match(/[.a-zA-z0-9-_]+/g)[1].replace(\"www.\", \"\"),\n        h = i(a.hostname),\n        d = function d() {\n      return \"/\" == a.pathname || /\\/(default|index|portal).[0-9a-zA-Z]+$/.test(a.pathname);\n    },\n        f = !0,\n        p = !1,\n        m = void 0;try {\n      for (var g, y = s[Symbol.iterator](); !(f = (g = y.next()).done); f = !0) {\n        var w = g.value,\n            x = e.get(w).name,\n            $ = i(x);w.startsWith(\"[[/\") && w.endsWith(\"/]]\") && new RegExp(w.replace(/^\\[\\[\\/|\\/\\]\\]/g, \"\")).test(location.href) ? n.push([w, l(e.get(w)), t]) : d() || w.endsWith(\"*\") || w.replace(/^http[s]?:/, \"\") != r.replace(/^http[s]?:/, \"\") ? w.match(/\\*/g) && 1 == w.match(/\\*/g).length && !d() && w.endsWith(\"*\") && c.includes($) && h == $ && r.includes(x) ? n.push([w, l(e.get(w)), t]) : v(a.origin + a.pathname, w) && n.push([w, l(e.get(w)), t]) : n.push([w, l(e.get(w)), t]);\n      }\n    } catch (t) {\n      p = !0, m = t;\n    } finally {\n      try {\n        !f && y.return && y.return();\n      } finally {\n        if (p) throw m;\n      }\n    }\n  }function O(t) {\n    if (!t.name || !t.url || !t.include) return -1;if (-1 == s(t.title)[0] || -1 == s(t.include)[0] || -1 == s(t.desc)[0]) return -2;if (t.paging) {\n      if (2 != t.paging.length) return -3;if (!t.paging[0].prev) return -4;if (!t.paging[1].next) return -5;if (-1 == s(t.paging[0].prev)[0] || -1 == s(t.paging[1].next)[0]) return -6;\n    }if (t.avatar) {\n      if (2 != t.avatar.length) return -7;if (!t.avatar[0].name) return -8;if (!t.avatar[1].url) return -9;if (-1 == s(t.avatar[0].name)[0] || -1 == s(t.avatar[1].url)[0]) return -10;\n    }return 0;\n  }function j(t) {\n    var e = t.replace('<div id=\"readability-page-1\" class=\"page\">', \"\"),\n        r = $(e)[0],\n        n = r.outerHTML.replace(r.innerHTML, \"\"),\n        i = $(n)[0],\n        a = i.tagName.toLowerCase(),\n        o = i.className;return { id: i.id, cls: o, tag: a };\n  }function S(t) {\n    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : \"text\",\n        r = $(\"html\");if (h(t)) {\n      var n = d(t),\n          i = a(n, 2),\n          o = i[0],\n          l = i[1];0 == l ? t = o : 3 == l ? t = M(r.find(o)) : 4 == l && (t = o.html());\n    } else \"html\" == e ? t = M(r.find(t)) : \"multi\" == e || (t = r.find(t).text().trim());return t;\n  }function M(t) {\n    var e = \"\";switch (t.length) {case 0:\n        e = \"<sr-rd-content-error></sr-rd-content-error>\";break;case 1:\n        e = t.html().trim();break;default:\n        e = t.map(function (t, e) {\n          return $(e).html();\n        }).get().join(\"<br>\");}return e;\n  }return function (r) {\n    function o(e) {\n      t(this, o);var r = i(this, (o.__proto__ || Object.getPrototypeOf(o)).call(this, e));return r.version = \"0.0.4 build 0111\", r.org_url = location.href, r.html = {}, r.plugin = {}, r.pure = !1, r.cleanup = !1, r;\n    }return function (t, e) {\n      if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function, not \" + (typeof e === \"undefined\" ? \"undefined\" : _typeof(e)));t.prototype = Object.create(e && e.prototype, { constructor: { value: t, enumerable: !1, writable: !0, configurable: !0 } }), e && (Object.setPrototypeOf ? Object.setPrototypeOf(t, e) : t.__proto__ = e);\n    }(o, w), e(o, [{ key: \"Exist\", value: function value() {\n        return this.org_url == location.href;\n      } }, { key: \"AddPlugin\", value: function value(t) {\n        this.plugin = { minimatch: t.minimatch, pangu: t.pangu, beautify: t.beautify, stylesheet: t.style, rdability: t.rdability, markdown: t.markdown }, n(o.prototype.__proto__ || Object.getPrototypeOf(o.prototype), \"SetMinimatch\", this).call(this, this.plugin.minimatch), n(o.prototype.__proto__ || Object.getPrototypeOf(o.prototype), \"SetRdability\", this).call(this, this.plugin.rdability), n(o.prototype.__proto__ || Object.getPrototypeOf(o.prototype), \"SetMarkdown\", this).call(this, this.plugin.markdown);\n      } }, { key: \"ReadMode\", value: function value() {\n        var t, e, r, n, i;this.html = (t = this.current.site, e = l(t), r = c(\"\" == t.title ? \"<title>\" : t.title), n = c(t.desc), i = c(t.include), e.title = \"\" == t.title || \"<title>\" == t.title ? $(\"head title\").text() : S(r), e.desc = function (t) {\n          if (void 0 == t) return t;var e = t.length,\n              r = t.indexOf(\"。\") + 1;return e > 100 && (t = r > 0 ? t.substr(0, r) : t.substr(0, 101) + \"......\"), t;\n        }(t.excerpt ? t.excerpt : S(n)), e.include = \"\" == t.include && \"\" != t.html ? t.html : S(i, \"html\"), e.avatar && e.avatar.length > 0 && \"\" == e.avatar[0].name && delete e.avatar, e.paging && e.paging.length > 0 && \"\" == e.paging[0].prev && delete e.paging, e.avatar && e.avatar.forEach(function (t) {\n          var e = Object.keys(t).join(),\n              r = t[e];t[e] = S(c(r), \"html\");\n        }), e.paging && e.paging.forEach(function (t) {\n          var e = Object.keys(t).join(),\n              r = t[e];t[e] = S(c(r));\n        }), e);\n      } }, { key: \"TempMode\", value: function value(t, e) {\n        this.state = \"temp\", this.dom = e, this.Newsite(t, e.outerHTML);\n      } }, { key: \"GetDom\", value: function value(t, e) {\n        return S(c(t), e);\n      } }, { key: \"Include\", value: function value() {\n        var t = this.current.site.include,\n            e = [],\n            r = c(t);try {\n          if (h(r)) {\n            var n = d(t),\n                i = a(n, 2),\n                o = i[0],\n                l = i[1];0 == l ? (t = t.replace(/\\[\\[{\\$\\(|}\\]\\]|\\).html\\(\\)/g, \"\"), e = $(d(\"[[[\" + t + \"]]]\")[0])) : 3 == l && (e = o);\n          } else r && (e = $(\"body\").find(r));\n        } catch (t) {}return e;\n      } }, { key: \"Exclude\", value: function value(t) {\n        return function (t, e) {\n          var r = [],\n              n = \"\",\n              i = !0,\n              o = !1,\n              l = void 0;try {\n            for (var u, s = e[Symbol.iterator](); !(i = (u = s.next()).done); i = !0) {\n              var f = u.value;if (h(f)) {\n                var p = d(f),\n                    m = a(p, 2),\n                    v = m[0],\n                    g = m[1];if (1 == g) n = v;else if (2 == g) {\n                  var y = t.html().match(new RegExp(v, \"g\"));if (y && y.length > 0) {\n                    var b = y.join(\"\");n = \"*[\" + b + \"]\";\n                  } else n = void 0;\n                } else 3 == g ? v.remove() : 4 == g && v.remove();\n              } else n = c(f);n && r.push(n);\n            }\n          } catch (t) {\n            o = !0, l = t;\n          } finally {\n            try {\n              !i && s.return && s.return();\n            } finally {\n              if (o) throw l;\n            }\n          }return r.join(\",\");\n        }(t, this.current.site.exclude);\n      } }, { key: \"Beautify\", value: function value(t) {\n        0 != t.children().length && this.plugin.beautify && (this.plugin.beautify.before(this.current.site.name, t), this.cleanup && this.plugin.beautify.cleanHTML(t, this.pure, this.isMathJax()), this.plugin.beautify.specbeautify(this.current.site.name, t), this.plugin.beautify.removeSpareTag(this.current.site.name, t), this.plugin.beautify.htmlbeautify(t), this.plugin.beautify.commbeautify(this.current.site.name, t));\n      } }, { key: \"Format\", value: function value(t) {\n        this.plugin.pangu && this.plugin.pangu.spacingElementByClassName(t);\n      } }, { key: \"Utils\", value: function value() {\n        return { dom2Xpath: f, xPath2Dom: p };\n      } }]), o;\n  }();\n});//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdmVuZGVyL3B1cmVhZC9wdXJlYWQubWluLmpzPzhhOGYiXSwibmFtZXMiOlsidCIsImUiLCJleHBvcnRzIiwibW9kdWxlIiwiUHVyZVJlYWQiLCJUeXBlRXJyb3IiLCJyIiwibGVuZ3RoIiwibiIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5Iiwia2V5IiwicHJvdG90eXBlIiwiYXNzaWduIiwiYXJndW1lbnRzIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiRnVuY3Rpb24iLCJpIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiYSIsImdldFByb3RvdHlwZU9mIiwidmFsdWUiLCJvIiwiZ2V0IiwiUmVmZXJlbmNlRXJyb3IiLCJBcnJheSIsImlzQXJyYXkiLCJTeW1ib2wiLCJpdGVyYXRvciIsImwiLCJuZXh0IiwiZG9uZSIsInB1c2giLCJyZXR1cm4iLCJmcm9tIiwiJCIsImV4dGVuZCIsInUiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJocmVmIiwibWF0Y2giLCJwcm90b2NvbCIsImhvc3QiLCJob3N0bmFtZSIsInBvcnQiLCJwYXRobmFtZSIsInNlYXJjaCIsImhhc2giLCJzIiwiaCIsImMiLCJ0cmltIiwicmVwbGFjZSIsInNwbGl0IiwidG9Mb3dlckNhc2UiLCJ0ZXN0IiwiZCIsImpvaW4iLCJwIiwiZiIsImlkIiwiYm9keSIsInRhZ05hbWUiLCJwYXJlbnROb2RlIiwiY2hpbGROb2RlcyIsIm5vZGVUeXBlIiwiZXZhbHVhdGUiLCJYUGF0aFJlc3VsdCIsIkZJUlNUX09SREVSRURfTk9ERV9UWVBFIiwic2luZ2xlTm9kZVZhbHVlIiwibSIsInVybCIsInRhcmdldCIsIm1hdGNoaW5nIiwibmFtZSIsInRpdGxlIiwiZGVzYyIsImV4Y2x1ZGUiLCJpbmNsdWRlIiwiYXZhdGFyIiwicGFnaW5nIiwidiIsImciLCJ5IiwiYiIsInciLCJnbG9iYWwiLCJjdXN0b20iLCJsb2NhbCIsIndpbmRvdyIsImxvY2F0aW9uIiwiZW5kc1dpdGgiLCJzaXRlcyIsImN1cnJlbnQiLCJzdGF0ZSIsIm9yaWdpbnMiLCJtYXRoamF4IiwiZmluZCIsImVhY2giLCJ0eXBlIiwic3RhcnRzV2l0aCIsIngiLCJOZXdzaXRlIiwib3V0ZXJIVE1MIiwiZG9tIiwiayIsImNvbnRlbnQiLCJqIiwiY2xzIiwidGFnIiwiZXhjZXJwdCIsIndyYXAiLCJzaXRlIiwicG9wIiwiYXV0byIsImh0bWwiLCJhcHBlbmQiLCJkZWNvZGVVUkkiLCJjaGlsZHJlbiIsImlzIiwiZGVmYXVsdCIsIkNvbnZlcnRlciIsIm1ha2VIdG1sIiwidGV4dCIsImF0dHIiLCJleHAiLCJmaW5kSW5kZXgiLCJfIiwiTWFwIiwicGVyc29uIiwiZm9yRWFjaCIsImFjdGl2ZSIsIlNhZmVzaXRlIiwiaW5jbHVkZXMiLCJOZXdtdWx0aXNpdGUiLCJSZWFkYWJpbGl0eSIsIkZvcm1hdHNpdGVzIiwiY29uY2F0Iiwia2V5cyIsIm1hcCIsImNvdW50IiwibmV3c2l0ZXMiLCJtb2RlIiwic3BsaWNlIiwicHJldiIsIk8iLCJzZXQiLCJTZXQiLCJkZWxldGUiLCJzdWJzdHIiLCJpbmRleE9mIiwibGFzdEluZGV4T2YiLCJjbG9uZU5vZGUiLCJwYXJzZSIsIlJlZ0V4cCIsIm9yaWdpbiIsImlubmVySFRNTCIsImNsYXNzTmFtZSIsIlMiLCJNIiwiX19wcm90b19fIiwidmVyc2lvbiIsIm9yZ191cmwiLCJwbHVnaW4iLCJwdXJlIiwiY2xlYW51cCIsImNyZWF0ZSIsImNvbnN0cnVjdG9yIiwic2V0UHJvdG90eXBlT2YiLCJtaW5pbWF0Y2giLCJwYW5ndSIsImJlYXV0aWZ5Iiwic3R5bGVzaGVldCIsInN0eWxlIiwicmRhYmlsaXR5IiwibWFya2Rvd24iLCJyZW1vdmUiLCJiZWZvcmUiLCJjbGVhbkhUTUwiLCJpc01hdGhKYXgiLCJzcGVjYmVhdXRpZnkiLCJyZW1vdmVTcGFyZVRhZyIsImh0bWxiZWF1dGlmeSIsImNvbW1iZWF1dGlmeSIsInNwYWNpbmdFbGVtZW50QnlDbGFzc05hbWUiLCJkb20yWHBhdGgiLCJ4UGF0aDJEb20iXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxDQUFDLFVBQVNBLENBQVQsRUFBV0MsQ0FBWCxFQUFhO0FBQUMsOENBQWlCQyxPQUFqQixNQUEwQixlQUFhLE9BQU9DLE1BQTlDLEdBQXFEQSxPQUFPRCxPQUFQLEdBQWVELEdBQXBFLEdBQXdFLFFBQXNDLG9DQUFPQSxDQUFQLG1UQUF0QyxHQUFnREQsRUFBRUksUUFBRixHQUFXSCxHQUFuSTtBQUF1SSxDQUFySixZQUEySixZQUFVO0FBQUM7QUFBYSxNQUFJRCxJQUFFLFdBQVNBLEVBQVQsRUFBV0MsQ0FBWCxFQUFhO0FBQUMsUUFBRyxFQUFFRCxjQUFhQyxDQUFmLENBQUgsRUFBcUIsTUFBTSxJQUFJSSxTQUFKLENBQWMsbUNBQWQsQ0FBTjtBQUF5RCxHQUFsRztBQUFBLE1BQW1HSixJQUFFLFlBQVU7QUFBQyxhQUFTRCxDQUFULENBQVdBLENBQVgsRUFBYUMsQ0FBYixFQUFlO0FBQUMsV0FBSSxJQUFJSyxJQUFFLENBQVYsRUFBWUEsSUFBRUwsRUFBRU0sTUFBaEIsRUFBdUJELEdBQXZCLEVBQTJCO0FBQUMsWUFBSUUsSUFBRVAsRUFBRUssQ0FBRixDQUFOLENBQVdFLEVBQUVDLFVBQUYsR0FBYUQsRUFBRUMsVUFBRixJQUFjLENBQUMsQ0FBNUIsRUFBOEJELEVBQUVFLFlBQUYsR0FBZSxDQUFDLENBQTlDLEVBQWdELFdBQVVGLENBQVYsS0FBY0EsRUFBRUcsUUFBRixHQUFXLENBQUMsQ0FBMUIsQ0FBaEQsRUFBNkVDLE9BQU9DLGNBQVAsQ0FBc0JiLENBQXRCLEVBQXdCUSxFQUFFTSxHQUExQixFQUE4Qk4sQ0FBOUIsQ0FBN0U7QUFBOEc7QUFBQyxZQUFPLFVBQVNQLENBQVQsRUFBV0ssQ0FBWCxFQUFhRSxDQUFiLEVBQWU7QUFBQyxhQUFPRixLQUFHTixFQUFFQyxFQUFFYyxTQUFKLEVBQWNULENBQWQsQ0FBSCxFQUFvQkUsS0FBR1IsRUFB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K0gsV0FBVWhJLENBQXZCLEVBQU47QUFBZ0MsT0FBOUQsRUFBMXZGLENBQUosQ0FBL1QsRUFBK25HckMsQ0FBdG9HO0FBQXdvRyxHQUExMUcsRUFBUDtBQUFvMkcsQ0FBampqQixDQUFEIiwiZmlsZSI6IjM0NS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiFmdW5jdGlvbih0LGUpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPWUoKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKGUpOnQuUHVyZVJlYWQ9ZSgpfSh0aGlzLGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIHQ9ZnVuY3Rpb24odCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSxlPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0LGUpe2Zvcih2YXIgcj0wO3I8ZS5sZW5ndGg7cisrKXt2YXIgbj1lW3JdO24uZW51bWVyYWJsZT1uLmVudW1lcmFibGV8fCExLG4uY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIG4mJihuLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxuLmtleSxuKX19cmV0dXJuIGZ1bmN0aW9uKGUscixuKXtyZXR1cm4gciYmdChlLnByb3RvdHlwZSxyKSxuJiZ0KGUsbiksZX19KCkscj1PYmplY3QuYXNzaWdufHxmdW5jdGlvbih0KXtmb3IodmFyIGU9MTtlPGFyZ3VtZW50cy5sZW5ndGg7ZSsrKXt2YXIgcj1hcmd1bWVudHNbZV07Zm9yKHZhciBuIGluIHIpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHIsbikmJih0W25dPXJbbl0pfXJldHVybiB0fSxuPWZ1bmN0aW9uIHQoZSxyLG4pe251bGw9PT1lJiYoZT1GdW5jdGlvbi5wcm90b3R5cGUpO3ZhciBpPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSxyKTtpZih2b2lkIDA9PT1pKXt2YXIgYT1PYmplY3QuZ2V0UHJvdG90eXBlT2YoZSk7cmV0dXJuIG51bGw9PT1hP3ZvaWQgMDp0KGEscixuKX1pZihcInZhbHVlXCJpbiBpKXJldHVybiBpLnZhbHVlO3ZhciBvPWkuZ2V0O3JldHVybiB2b2lkIDAhPT1vP28uY2FsbChuKTp2b2lkIDB9LGk9ZnVuY3Rpb24odCxlKXtpZighdCl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIWV8fFwib2JqZWN0XCIhPXR5cGVvZiBlJiZcImZ1bmN0aW9uXCIhPXR5cGVvZiBlP3Q6ZX0sYT1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0LGUpe2lmKEFycmF5LmlzQXJyYXkodCkpcmV0dXJuIHQ7aWYoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdCh0KSlyZXR1cm4gZnVuY3Rpb24odCxlKXt2YXIgcj1bXSxuPSEwLGk9ITEsYT12b2lkIDA7dHJ5e2Zvcih2YXIgbyxsPXRbU3ltYm9sLml0ZXJhdG9yXSgpOyEobj0obz1sLm5leHQoKSkuZG9uZSkmJihyLnB1c2goby52YWx1ZSksIWV8fHIubGVuZ3RoIT09ZSk7bj0hMCk7fWNhdGNoKHQpe2k9ITAsYT10fWZpbmFsbHl7dHJ5eyFuJiZsLnJldHVybiYmbC5yZXR1cm4oKX1maW5hbGx5e2lmKGkpdGhyb3cgYX19cmV0dXJuIHJ9KHQsZSk7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIil9fSgpLG89ZnVuY3Rpb24odCl7aWYoQXJyYXkuaXNBcnJheSh0KSl7Zm9yKHZhciBlPTAscj1BcnJheSh0Lmxlbmd0aCk7ZTx0Lmxlbmd0aDtlKyspcltlXT10W2VdO3JldHVybiByfXJldHVybiBBcnJheS5mcm9tKHQpfTtmdW5jdGlvbiBsKHQpe3JldHVybiAkLmV4dGVuZCghMCx7fSx0KX1mdW5jdGlvbiB1KHQpe2lmKGRvY3VtZW50KXt2YXIgZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtyZXR1cm4gZS5ocmVmPXQsZX12YXIgcj10Lm1hdGNoKC9eKGh0dHBzP1xcOilcXC9cXC8oKFteOlxcLz8jXSopKD86XFw6KFswLTldKykpPykoW1xcL117MCwxfVtePyNdKikoXFw/W14jXSp8KSgjLip8KSQvKTtyZXR1cm4gciYme2hyZWY6dCxwcm90b2NvbDpyWzFdLGhvc3Q6clsyXSxob3N0bmFtZTpyWzNdLHBvcnQ6cls0XSxwYXRobmFtZTpyWzVdLHNlYXJjaDpyWzZdLGhhc2g6cls3XX19ZnVuY3Rpb24gcyh0KXtpZihcIlwiPT10KXJldHVyblswLHRdO2lmKGgodCkpcmV0dXJuWzIsdF07dmFyIGU9dC5tYXRjaCgvPFxcUysgKGNsYXNzfGlkKT0oXCJ8Jyk/W1xcdy1fPTs6JyBdKyhcInwnKT8+PyR8PFteL11bLV9hLXpBLVowLTldKz4/JC9naSk7cmV0dXJuIGUmJmUubGVuZ3RoPjA/WzEsZV06Wy0xLHZvaWQgMF19ZnVuY3Rpb24gYyh0KXt2YXIgZT1zKHQpLHI9YShlLDIpLG49clswXSxpPXJbMV07aWYoMj09bilyZXR1cm4gdDtpZigxPT1uKXt2YXIgbz1pWzBdLnRyaW0oKS5yZXBsYWNlKC9bJ1wiPD5dL2csXCJcIikucmVwbGFjZSgvIC9naSxcIj1cIikuc3BsaXQoXCI9XCIpLGw9YShvLDMpLHU9bFswXSxjPWxbMV0saD1sWzJdO3JldHVybiBjP1wiY2xhc3NcIj09PWMudG9Mb3dlckNhc2UoKT9jPXUrXCIuXCIraDpcImlkXCI9PT1jLnRvTG93ZXJDYXNlKCkmJihjPXUrXCIjXCIraCk6Yz11LGN9cmV0dXJuIG51bGx9ZnVuY3Rpb24gaCh0KXtyZXR1cm4vXihcXFtcXFspW1xcW3tgJy9dezF9WyBcXFNdK1t9YCcvXFxdXVxcXVxcXXsxfSgkKS9nLnRlc3QodCl9ZnVuY3Rpb24gZCh0KXt2YXIgZT1bdC5yZXBsYWNlKC8oXilcXFtcXFt8XFxdXFxdJC9nLFwiXCIpXSxyPWVbMF0sbj1lWzFdO3N3aXRjaChyWzBdKXtjYXNlXCJ7XCI6cj1yLnJlcGxhY2UoL157fH0kL2csXCJcIiksdD1uZXcgRnVuY3Rpb24oXCJyZXR1cm4gXCIrcikoKSxuPTA7YnJlYWs7Y2FzZVwiJ1wiOnQ9KHQ9ci5yZXBsYWNlKC9eJ3wnJC9nLFwiXCIpKS5tYXRjaCgvXjxbYS16QS1aMC05Xy1dKz4vZykuam9pbihcIlwiKS5yZXBsYWNlKC88fD4vZyxcIlwiKStcIjpjb250YWlucyhcIit0LnJlcGxhY2UoLzxbL2EtekEtWjAtOV8tXSs+L2csXCJcIikrXCIpXCIsbj0xO2JyZWFrO2Nhc2VcIi9cIjp0PXIucmVwbGFjZSgvXlxcL3xcXC8kL2csXCJcIikucmVwbGFjZSgvXFxcXHsyfS9nLFwiXFxcXFwiKS5yZXBsYWNlKC8nL2csJ1wiJyksbj0yO2JyZWFrO2Nhc2VcIltcIjpyPXIucmVwbGFjZSgvXnt8fSQvZyxcIlwiKSx0PW5ldyBGdW5jdGlvbihcInJldHVybiBcIityKSgpWzBdLG49MzticmVhaztjYXNlXCJgXCI6cj1wKHI9ci5yZXBsYWNlKC9eYHxgJC9nLFwiXCIpKSx0PSQociksbj00O2JyZWFrO2RlZmF1bHQ6bj0tMX1yZXR1cm5bdCxuXX1mdW5jdGlvbiBmKHQpe3RyeXtpZihcIlwiIT10LmlkKXJldHVybiB2b2lkIDA9PXQuaWQ/XCJcIjpcIi8vKltAaWQ9J1wiK3QuaWQrXCInXVwiO2lmKHQ9PT1kb2N1bWVudC5ib2R5KXJldHVyblwiL2h0bWxbMV0vXCIrdC50YWdOYW1lLnRvTG93ZXJDYXNlKCk7Zm9yKHZhciBlPTAscj10LnBhcmVudE5vZGUuY2hpbGROb2RlcyxuPTA7bjxyLmxlbmd0aDtuKyspe3ZhciBpPXJbbl07aWYoaT09PXQpcmV0dXJuIGYodC5wYXJlbnROb2RlKStcIi9cIit0LnRhZ05hbWUudG9Mb3dlckNhc2UoKStcIltcIisoZSsxKStcIl1cIjsxPT09aS5ub2RlVHlwZSYmaS50YWdOYW1lPT09dC50YWdOYW1lJiZlKyt9fWNhdGNoKHQpe3JldHVyblwiXCJ9fWZ1bmN0aW9uIHAodCl7cmV0dXJuIGRvY3VtZW50LmV2YWx1YXRlKHQsZG9jdW1lbnQsbnVsbCxYUGF0aFJlc3VsdC5GSVJTVF9PUkRFUkVEX05PREVfVFlQRSxudWxsKS5zaW5nbGVOb2RlVmFsdWV9dmFyIG09e3VybDpcIlwiLHRhcmdldDpcIlwiLG1hdGNoaW5nOltdLG5hbWU6XCJcIix0aXRsZTpcIlwiLGRlc2M6XCJcIixleGNsdWRlOltdLGluY2x1ZGU6XCJcIixhdmF0YXI6W10scGFnaW5nOltdfSx2PXZvaWQgMCxnPXZvaWQgMCx5PXZvaWQgMCxiPXZvaWQgMCx3PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gbigpe3ZhciBlLHIsaT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06e2dsb2JhbDpbXSxjdXN0b206W10sbG9jYWw6W119O3QodGhpcyxuKSx0aGlzLnVybD0ocj0oZT1cIi9cIiE9KGU9d2luZG93LmxvY2F0aW9uLnBhdGhuYW1lKSYmZS5lbmRzV2l0aChcIi9cIik/ZT1lLnJlcGxhY2UoL1xcLyQvLFwiXCIpOmUpLnJlcGxhY2UoL1xcL1slQCMufmEtekEtWjAtOV8tXSskfF5cXC8kL2csXCJcIiksd2luZG93LmxvY2F0aW9uLnByb3RvY29sK1wiLy9cIit3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUrcitcIi9cIiksdGhpcy5zaXRlcz1pLHRoaXMuY3VycmVudD17fSx0aGlzLnN0YXRlPVwibm9uZVwiLHRoaXMub3JpZ2lucz1bXSx0aGlzLm1hdGhqYXg9dm9pZCAwLGI9bG9jYXRpb24uaHJlZn1yZXR1cm4gZShuLFt7a2V5OlwiU2V0VVJMXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGUscj11KHQpLG49KGU9XCIvXCIhPShlPXIucGF0aG5hbWUpJiZlLmVuZHNXaXRoKFwiL1wiKT9lPWUucmVwbGFjZSgvXFwvJC8sXCJcIik6ZSkucmVwbGFjZSgvXFwvWyVAIy5+YS16QS1aMC05Xy1dKyR8XlxcLyQvZyxcIlwiKTt0aGlzLnVybD1yLnByb3RvY29sK1wiLy9cIityLmhvc3RuYW1lK24rXCIvXCIsYj10fX0se2tleTpcIlNldE1pbmltYXRjaFwiLHZhbHVlOmZ1bmN0aW9uKHQpe3Y9dH19LHtrZXk6XCJTZXRSZGFiaWxpdHlcIix2YWx1ZTpmdW5jdGlvbih0KXtnPXR9fSx7a2V5OlwiU2V0TWFya2Rvd25cIix2YWx1ZTpmdW5jdGlvbih0KXt5PXR9fSx7a2V5OlwiaXNNYXRoSmF4XCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3JldHVybiB2b2lkIDA9PXRoaXMubWF0aGpheCYmKHRoaXMubWF0aGpheD0hMSwkKFwiYm9keVwiKS5maW5kKFwic2NyaXB0XCIpLmVhY2goZnVuY3Rpb24oZSxyKXtyLnR5cGUuc3RhcnRzV2l0aChcIm1hdGhcIikmJih0Lm1hdGhqYXg9ITApfSkpLHRoaXMubWF0aGpheH19LHtrZXk6XCJNYXRoSmF4TW9kZVwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9eCgpO2lmKC0xIT10KXJldHVybiB0aGlzLk5ld3NpdGUoXCJyZWFkXCIsdFswXS5vdXRlckhUTUwpLHRoaXMuZG9tPXRbMF0sdGhpcy5zdGF0ZT1cInRlbXBcIix0O3ZhciBlPWsoKTtpZihlJiZcIlwiIT1lLmNvbnRlbnQpe3ZhciByPWooZS5jb250ZW50KSxuPXIuaWQsaT1yLmNscyxhPXIudGFnO3JldHVyblwiXCIhPW4/XCI8XCIrYSsnIGlkPVwiJytuKydcIj4nOlwiXCIhPWk/XCI8XCIrYSsnIGNsYXNzPVwiJytpKydcIj4nOnZvaWQgMH19fSx7a2V5OlwiUmVhZGFiaWxpdHlcIix2YWx1ZTpmdW5jdGlvbigpe3RyeXt2YXIgdD1rKCk7aWYoIXR8fFwiXCI9PXQuY29udGVudCl0aHJvd1wiUmVhZGFiaWxpdHkgZXJyb3JcIjt0aGlzLk5ld3NpdGUoXCJyZWFkXCIsdC5jb250ZW50LHQuZXhjZXJwdCk7dmFyIGU9aih0LndyYXApLHI9ZS5pZCxuPWUuY2xzLGk9ZS50YWc7dGhpcy5kb209XCJcIiE9cj8kKFwiYm9keVwiKS5maW5kKFwiI1wiK3IpWzBdOlwiXCIhPW4/JChcImJvZHlcIikuZmluZChcIi5cIituLnJlcGxhY2UoLyAvZ2ksXCIuXCIpKVswXTokKFwiYm9keVwiKS5maW5kKFwiXCIraSlbMF0sdGhpcy5zdGF0ZT1cInRlbXBcIn1jYXRjaCh0KXt2YXIgYT14KCk7LTEhPWE/KHRoaXMuTmV3c2l0ZShcInJlYWRcIixhWzBdLm91dGVySFRNTCksdGhpcy5kb209YVswXSx0aGlzLnN0YXRlPVwidGVtcFwiKTp0aGlzLmN1cnJlbnQuc2l0ZT1sKG0pfX19LHtrZXk6XCJHZXRzaXRlXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5zaXRlc1t0XS5maW5kKGZ1bmN0aW9uKHQpe3JldHVybiB0WzBdPT1lfSl9fSx7a2V5OlwiR2V0c2l0ZXNcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXMsZT1bXSxuPWZ1bmN0aW9uKCl7aWYodihsb2NhdGlvbi5ocmVmLFwiZmlsZTovLyoqLyoudHh0XCIpfHx2KGxvY2F0aW9uLmhyZWYsXCJodHRwKjovLyoqLyoudHh0XCIpKXJldHVybiBmdW5jdGlvbigpe3ZhciB0PWxvY2F0aW9uLnBhdGhuYW1lLnNwbGl0KFwiL1wiKS5wb3AoKSxlPVwiZmlsZTpcIj09bG9jYXRpb24ucHJvdG9jb2w/XCJsb2NhbFwiOlwicmVtb3RlXCIscj17bmFtZTpcInR4dHJlYWQ6OlwiK2UsdGl0bGU6XCI8dGl0bGU+XCIsZGVzYzpcIlwiLGluY2x1ZGU6XCI8cHJlPlwiLGF1dG86ITEsZXhjbHVkZTpbXX07XCJyZW1vdGVcIj09ZSYmKHIuaW5jbHVkZT1cIlwiLHIuaHRtbD0kKFwiYm9keSBwcmVcIikuaHRtbCgpLnJlcGxhY2UoL1xcbi9naSxcIjxicj5cIikpO3JldHVybiEkKFwidGl0bGVcIikuaHRtbCgpJiYkKFwiaGVhZFwiKS5hcHBlbmQoXCI8dGl0bGU+XCIrZGVjb2RlVVJJKHQucmVwbGFjZShcIi50eHRcIixcIlwiKSkrXCI8L3RpdGxlPlwiKSxyfSgpO2lmKCQoJChcImJvZHlcIikuY2hpbGRyZW4oKVswXSkuaXMoXCJwcmVcIikmJih2KGxvY2F0aW9uLmhyZWYsXCJmaWxlOi8vKiovKi5tZFwiKXx8dihsb2NhdGlvbi5ocmVmLFwiaHR0cCo6Ly8qKi8qLm1kXCIpKSlyZXR1cm4gZnVuY3Rpb24oKXt2YXIgdD1sb2NhdGlvbi5wYXRobmFtZS5zcGxpdChcIi9cIikucG9wKCksZT17bmFtZTpcInR4dHJlYWQ6OlwiKyhcImZpbGU6XCI9PWxvY2F0aW9uLnByb3RvY29sP1wibG9jYWxcIjpcInJlbW90ZVwiKSx0aXRsZTpcIjx0aXRsZT5cIixkZXNjOlwiXCIsaW5jbHVkZTpcIlwiLGF1dG86ITEsZXhjbHVkZTpbXX0scj0obmV3IHkuZGVmYXVsdC5Db252ZXJ0ZXIpLm1ha2VIdG1sKCQoXCJib2R5IHByZVwiKS50ZXh0KCkpO3JldHVybiBlLmh0bWw9ciwhJChcInRpdGxlXCIpLmh0bWwoKSYmJChcImhlYWRcIikuYXBwZW5kKFwiPHRpdGxlPlwiK2RlY29kZVVSSSh0LnJlcGxhY2UoXCIubWRcIixcIlwiKSkrXCI8L3RpdGxlPlwiKSxlfSgpO3ZhciB0PS88XFxTKyAoY2xhc3N8aWQpPShcInwnKT9bXFx3LV89OzonIF0rKFwifCcpPz4/JHw8W14vXVstX2EtekEtWjAtOV0rPj8kL2dpLGU9e25hbWU6JChcIm1ldGFbbmFtZT0nc2ltcHJlYWQ6bmFtZSddXCIpLmF0dHIoXCJjb250ZW50XCIpLHVybDokKFwibWV0YVtuYW1lPSdzaW1wcmVhZDp1cmwnXVwiKS5hdHRyKFwiY29udGVudFwiKSx0aXRsZTokKFwibWV0YVtuYW1lPSdzaW1wcmVhZDp0aXRsZSddXCIpLmF0dHIoXCJjb250ZW50XCIpLGRlc2M6JChcIm1ldGFbbmFtZT0nc2ltcHJlYWQ6ZGVzYyddXCIpLmF0dHIoXCJjb250ZW50XCIpLGluY2x1ZGU6JChcIm1ldGFbbmFtZT0nc2ltcHJlYWQ6aW5jbHVkZSddXCIpLmF0dHIoXCJjb250ZW50XCIpLGV4cDokKFwibWV0YVtuYW1lPSdzaW1wcmVhZDpleGNsdWRlJ11cIikuYXR0cihcImNvbnRlbnRcIiksYXV0bzokKFwibWV0YVtuYW1lPSdzaW1wcmVhZDphdXRvJ11cIikuYXR0cihcImNvbnRlbnRcIiksZXhjbHVkZTpbXX07aWYoZS5uYW1lJiZlLmluY2x1ZGUpe2lmKGUudXJsJiYhdihsb2NhdGlvbi5ocmVmLGUudXJsKSlyZXR1cm47IWUudGl0bGUmJihlLnRpdGxlPVwiPHRpdGxlPlwiKSwhZS5kZXNjJiYoZS5kZXNjPVwiXCIpLCFlLmV4cCYmKGUuZXhwPVwiXCIpLGUubmFtZT1cIm1ldGFyZWFkOjpcIitlLm5hbWUsZS5hdXRvPVwidHJ1ZVwiPT1lLmF1dG87dmFyIHI9W1widGl0bGVcIixcImRlc2NcIixcImluY2x1ZGVcIixcImV4cFwiXS5maW5kSW5kZXgoZnVuY3Rpb24ocil7cmV0dXJuXCJcIiE9ZVtyXSYmIWVbcl0ubWF0Y2godCl9KTtyZXR1cm4gZS5leGNsdWRlLnB1c2goZS5leHApLGRlbGV0ZSBlLmV4cCwtMT09cj9lOnZvaWQgMH1yZXR1cm59KCk7aWYodGhpcy5jdXJyZW50LnVybD10aGlzLnVybCxuKXRoaXMuY3VycmVudC5hdXRvPW4uYXV0byx0aGlzLmN1cnJlbnQudXJsPW4udXJsLGRlbGV0ZSBuLmF1dG8sZGVsZXRlIG4udXJsLHRoaXMuY3VycmVudC5zaXRlPXIoe30sbiksdGhpcy5jdXJyZW50LnNpdGUubmFtZS5zdGFydHNXaXRoKFwibWV0YXJlYWQ6OlwiKSYmKHRoaXMuc3RhdGU9XCJtZXRhXCIpLHRoaXMuY3VycmVudC5zaXRlLm5hbWUuc3RhcnRzV2l0aChcInR4dHJlYWQ6OlwiKSYmKHRoaXMuc3RhdGU9XCJ0eHRcIik7ZWxzZSBpZihfKFwibG9jYWxcIixuZXcgTWFwKHRoaXMuc2l0ZXMubG9jYWwpLHRoaXMudXJsLGUpLF8oXCJnbG9iYWxcIixuZXcgTWFwKHRoaXMuc2l0ZXMuZ2xvYmFsKSx0aGlzLnVybCxlKSxfKFwicGVyc29uXCIsbmV3IE1hcCh0aGlzLnNpdGVzLnBlcnNvbiksdGhpcy51cmwsZSksXyhcImN1c3RvbVwiLG5ldyBNYXAodGhpcy5zaXRlcy5jdXN0b20pLHRoaXMudXJsLGUpLGUubGVuZ3RoPjApe3ZhciBpPXZvaWQgMDtpZihlLmZvckVhY2goZnVuY3Rpb24oZSl7ZVsxXS5hY3RpdmUmJihpPWUsdC5jdXJyZW50LnVybD1pWzBdLHQuY3VycmVudC5zaXRlPXQuU2FmZXNpdGUocih7fSxpWzFdKSxpWzJdLGlbMF0pLHQuc3RhdGU9XCJhZGFwdGVyXCIpfSksIWkpe3ZhciBhPWVbMF07YVsxXS5hY3RpdmU9ITAsdGhpcy5jdXJyZW50LnVybD1hWzBdLHRoaXMuY3VycmVudC5zaXRlPXRoaXMuU2FmZXNpdGUocih7fSxhWzFdKSxhWzJdLGFbMF0pLHRoaXMuc3RhdGU9XCJhZGFwdGVyXCJ9fWVsc2V7dmFyIG89ZnVuY3Rpb24oKXtpZihsb2NhdGlvbi5wYXRobmFtZS5pbmNsdWRlcyhcInRocmVhZFwiKXx8bG9jYXRpb24ucGF0aG5hbWUuaW5jbHVkZXMoXCJmb3J1bS5waHBcIikpe2lmKCQoXCIudF9mXCIpLmxlbmd0aD4wJiYkKFwiLmZhdmF0YXJcIikuZmluZChcIi5hdXRoaVwiKS5sZW5ndGg+MCYmJChcIi5hdmF0YXJcIikuZmluZChcImltZ1wiKS5sZW5ndGg+MClyZXR1cm57YXZhdGFyOlt7bmFtZTpcIltbeyQoJy5mYXZhdGFyJykuZmluZCgnLmF1dGhpJyl9XV1cIn0se3VybDpcIltbeyQoJy5hdmF0YXInKS5maW5kKCdpbWcnKX1dXVwifV0saW5jbHVkZTpcIltbeyQoJy50X2YnKX1dXVwifX1lbHNlIGlmKC9cXC90XFwvW1xcdy1dK1xcL1xcZCsvLnRlc3QobG9jYXRpb24ucGF0aG5hbWUpJiYkKFwibWV0YVtuYW1lPWdlbmVyYXRvcl1cIikuYXR0cihcImNvbnRlbnRcIikuaW5jbHVkZXMoXCJkaXNjb3Vyc2VcIikpcmV0dXJue2F2YXRhcjpbe25hbWU6XCJbW3skKCcudG9waWMtYXZhdGFyJykuZmluZCgnLmFbZGF0YS11c2VyLWNhcmRdJyl9XV1cIn0se3VybDpcIltbeyQoJy50b3BpYy1hdmF0YXInKS5maW5kKCdpbWcnKX1dXVwifV0saW5jbHVkZTpcIltbeyQoJy5jb29rZWQnKX1dXVwifTtyZXR1cm4tMX0oKTstMSE9bz8odGhpcy5OZXdtdWx0aXNpdGUoXCJyZWFkXCIsbyksdGhpcy5zdGF0ZT1cInRlbXBcIik6dGhpcy5SZWFkYWJpbGl0eSgpfXRoaXMuY3VycmVudC5zaXRlLm1hdGNoaW5nPWV9fSx7a2V5OlwiQWRkc2l0ZXNcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT0wO2lmKDA9PXRoaXMuc2l0ZXMuZ2xvYmFsLmxlbmd0aCl0aGlzLnNpdGVzLmdsb2JhbD10aGlzLkZvcm1hdHNpdGVzKHQpLGU9dGhpcy5zaXRlcy5nbG9iYWwubGVuZ3RoO2Vsc2V7dmFyIHI9ZnVuY3Rpb24odCxlKXt2YXIgcj1uZXcgTWFwKGUpLG49W10uY29uY2F0KG8oci5rZXlzKCkpKSxpPTA7cmV0dXJuIHQubWFwKGZ1bmN0aW9uKHQpe24uaW5jbHVkZXModFswXSk/bi5pbmNsdWRlcyh0WzBdKTppKyt9KSx7Y291bnQ6aSxuZXdzaXRlczp0fX0odGhpcy5Gb3JtYXRzaXRlcyh0KSx0aGlzLnNpdGVzLmdsb2JhbCk7ZT1yLmNvdW50LHRoaXMuc2l0ZXMuZ2xvYmFsPXIubmV3c2l0ZXN9cmV0dXJuIGV9fSx7a2V5OlwiQWRkbG9jYWxzaXRlc1wiLHZhbHVlOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnNpdGVzLmxvY2FsPVtdLmNvbmNhdChvKHQpKSx0aGlzLnNpdGVzLmxvY2FsfX0se2tleTpcIkFkZGFsbHNpdGVzXCIsdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuc2l0ZXM9e2dsb2JhbDpbXS5jb25jYXQobyh0Lmdsb2JhbCkpLHBlcnNvbjpbXS5jb25jYXQobyh0LnBlcnNvbikpLGN1c3RvbTpbXS5jb25jYXQobyh0LmN1c3RvbSkpLGxvY2FsOltdLmNvbmNhdChvKHQubG9jYWwpKX0sdGhpcy5zaXRlc319LHtrZXk6XCJOZXdzaXRlXCIsdmFsdWU6ZnVuY3Rpb24odCxlLG4pe3ZhciBpPXttb2RlOnQsdXJsOndpbmRvdy5sb2NhdGlvbi5ocmVmLHNpdGU6e25hbWU6XCJ0ZW1wcmVhZDo6XCIrd2luZG93LmxvY2F0aW9uLmhvc3QsdGl0bGU6XCI8dGl0bGU+XCIsZGVzYzpcIltbeyQoJ21ldGFbbmFtZT1EZXNjcmlwdGlvbl0nKS5hdHRyKCdjb250ZW50Jyl8fCQoJ21ldGFbbmFtZT1kZXNjcmlwdGlvbl0nKS5hdHRyKCdjb250ZW50Jyl9XV1cIixpbmNsdWRlOlwiXCIsZXhjbHVkZTpbXX19O2UmJihpLnNpdGUuaHRtbD1lKSx0aGlzLmN1cnJlbnQubW9kZT1pLm1vZGUsdGhpcy5jdXJyZW50LnVybD1pLnVybCx0aGlzLmN1cnJlbnQuc2l0ZT10aGlzLlNhZmVzaXRlKHIoe30saS5zaXRlKSxcImxvY2FsXCIsaS51cmwpLG4mJih0aGlzLmN1cnJlbnQuc2l0ZS5leGNlcnB0PW4pfX0se2tleTpcIk5ld211bHRpc2l0ZVwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7dmFyIG49e21vZGU6dCx1cmw6d2luZG93LmxvY2F0aW9uLmhyZWYsc2l0ZTp7bmFtZTpcInRlbXByZWFkOjpcIit3aW5kb3cubG9jYXRpb24uaG9zdCx0aXRsZTpcIjx0aXRsZT5cIixkZXNjOlwiXCIsaW5jbHVkZTplLmluY2x1ZGUsZXhjbHVkZTpbXSxhdmF0YXI6ZS5hdmF0YXJ9fTt0aGlzLmN1cnJlbnQubW9kZT1uLm1vZGUsdGhpcy5jdXJyZW50LnVybD1uLnVybCx0aGlzLmN1cnJlbnQuc2l0ZT10aGlzLlNhZmVzaXRlKHIoe30sbi5zaXRlKSxcImxvY2FsXCIsbi51cmwpfX0se2tleTpcIlVwZGF0ZXNpdGVcIix2YWx1ZTpmdW5jdGlvbih0LGUscil7dmFyIG49dGhpcy5zaXRlc1t0XS5maW5kSW5kZXgoZnVuY3Rpb24odCl7cmV0dXJuIHRbMF09PWV9KTstMT09biYmKG49dGhpcy5zaXRlc1t0XS5sZW5ndGgpLHRoaXMuc2l0ZXNbdF0uc3BsaWNlKG4sMSxyKX19LHtrZXk6XCJEZWxldGVzaXRlXCIsdmFsdWU6ZnVuY3Rpb24odCxlLHIpe3ZhciBuPXRoaXMuc2l0ZXNbdF0uZmluZEluZGV4KGZ1bmN0aW9uKHQpe3JldHVybiB0WzBdPT1lfSk7LTEhPW4mJnRoaXMuc2l0ZXNbdF0uc3BsaWNlKG4sMSkscihuKX19LHtrZXk6XCJTYWZlc2l0ZVwiLHZhbHVlOmZ1bmN0aW9uKHQsZSxyKXtyZXR1cm4gdC51cmw9cix0LnRhcmdldD1lLFwiXCI9PXQubmFtZSYmKHQubmFtZT1cInRlbXByZWFkOjpcIiksKCF0LmF2YXRhcnx8MD09dC5hdmF0YXIubGVuZ3RoKSYmKHQuYXZhdGFyPVt7bmFtZTpcIlwifSx7dXJsOlwiXCJ9XSksKCF0LnBhZ2luZ3x8MD09dC5wYWdpbmcubGVuZ3RoKSYmKHQucGFnaW5nPVt7cHJldjpcIlwifSx7bmV4dDpcIlwifV0pLHR9fSx7a2V5OlwiQ2xlYW5zaXRlXCIsdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuIGRlbGV0ZSB0LnVybCxkZWxldGUgdC5odG1sLGRlbGV0ZSB0LnRhcmdldCxkZWxldGUgdC5tYXRjaGluZyx0LmF2YXRhciYmdC5hdmF0YXIubGVuZ3RoPjAmJlwiXCI9PXQuYXZhdGFyWzBdLm5hbWUmJmRlbGV0ZSB0LmF2YXRhcix0LnBhZ2luZyYmdC5wYWdpbmcubGVuZ3RoPjAmJlwiXCI9PXQucGFnaW5nWzBdLnByZXYmJmRlbGV0ZSB0LnBhZ2luZyx0fX0se2tleTpcIkZvcm1hdHNpdGVzXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9bmV3IE1hcCxyPSEwLG49ITEsaT12b2lkIDA7dHJ5e2Zvcih2YXIgYSxsPXQuc2l0ZXNbU3ltYm9sLml0ZXJhdG9yXSgpOyEocj0oYT1sLm5leHQoKSkuZG9uZSk7cj0hMCl7dmFyIHU9YS52YWx1ZTtpZigwPT1PKHUpKXt2YXIgcz11LnVybDtkZWxldGUgdS51cmwsZS5zZXQocyx1KX19fWNhdGNoKHQpe249ITAsaT10fWZpbmFsbHl7dHJ5eyFyJiZsLnJldHVybiYmbC5yZXR1cm4oKX1maW5hbGx5e2lmKG4pdGhyb3cgaX19cmV0dXJuW10uY29uY2F0KG8oZSkpfX0se2tleTpcIkNsZWFyc2l0ZXNcIix2YWx1ZTpmdW5jdGlvbih0KXt0P3RoaXMuc2l0ZXNbdF09W106dGhpcy5zaXRlcz17Z2xvYmFsOltdLGN1c3RvbTpbXSxsb2NhbDpbXX19fSx7a2V5OlwiT3JpZ2luc1wiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPXQub3JpZ2lucy5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIHQudXJsfSk7cmV0dXJuKGU9bmV3IFNldCh0aGlzLm9yaWdpbnMuY29uY2F0KGUpKSkuZm9yRWFjaChmdW5jdGlvbih0KXtcIlwiIT10LnRyaW0oKSYmdC50cmltKCkuc3RhcnRzV2l0aChcImh0dHBcIikmJnQudHJpbSgpLmVuZHNXaXRoKFwiLmpzb25cIil8fGUuZGVsZXRlKHQpfSksdGhpcy5vcmlnaW5zPVtdLmNvbmNhdChvKGUpKSx0aGlzLm9yaWdpbnN9fSx7a2V5OlwiQWRkb3JpZ2luc1wiLHZhbHVlOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnNpdGVzLmN1c3RvbT1bXS5jb25jYXQobyh0KSksdGhpcy5zaXRlcy5jdXN0b219fSx7a2V5OlwiQ2xlYXJvcmlnaW5zXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLnNpdGVzLmN1c3RvbS5sZW5ndGg7cmV0dXJuIHRoaXMuc2l0ZXMuY3VzdG9tPVtdLHR9fV0pLG59KCk7ZnVuY3Rpb24geCgpe3ZhciB0PSQoXCJib2R5XCIpLGU9ITAscj0hMSxuPXZvaWQgMDt0cnl7Zm9yKHZhciBpLGE9W1wiW2l0ZW1wcm9wPSdhcnRpY2xlQm9keSddXCIsXCJhcnRpY2xlXCIsXCIucG9zdC1jb250ZW50XCIsXCIuZW50cnktY29udGVudFwiLFwiLnBvc3QtYXJ0aWNsZVwiLFwiLmNvbnRlbnQtcG9zdFwiLFwiLmFydGljbGUtZW50cnlcIixcIi5hcnRpY2xlLWNvbnRlbnRcIixcIi5hcnRpY2xlLWJvZHlcIixcIi5tYXJrZG93bi1ib2R5XCIsXCIucG9zdFwiLFwiLmNvbnRlbnRcIl1bU3ltYm9sLml0ZXJhdG9yXSgpOyEoZT0oaT1hLm5leHQoKSkuZG9uZSk7ZT0hMCl7dmFyIG89aS52YWx1ZSxsPXQuZmluZChvKTtpZihsLmxlbmd0aD4wKXJldHVybiBsfX1jYXRjaCh0KXtyPSEwLG49dH1maW5hbGx5e3RyeXshZSYmYS5yZXR1cm4mJmEucmV0dXJuKCl9ZmluYWxseXtpZihyKXRocm93IG59fXJldHVybi0xfWZ1bmN0aW9uIGsoKXt2YXIgdD1kb2N1bWVudC5sb2NhdGlvbixlPSh0LmhyZWYsdC5ob3N0LHQucHJvdG9jb2wsdC5ob3N0LHQucHJvdG9jb2wuc3Vic3RyKDAsdC5wcm90b2NvbC5pbmRleE9mKFwiOlwiKSksdC5wcm90b2NvbCx0Lmhvc3QsdC5wYXRobmFtZS5zdWJzdHIoMCx0LnBhdGhuYW1lLmxhc3RJbmRleE9mKFwiL1wiKSsxKSxuZXcgZy5SZWFkYWJpbGl0eShkb2N1bWVudC5jbG9uZU5vZGUoITApKS5wYXJzZSgpKTtyZXR1cm4gZX1mdW5jdGlvbiBfKHQsZSxyKXt2YXIgbj1hcmd1bWVudHMubGVuZ3RoPjMmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106W10saT1mdW5jdGlvbih0KXt2YXIgZT10LnJlcGxhY2UoXCJ3d3cuXCIsXCJcIikubWF0Y2goL1xcLlxcUytcXC5cXFMrL2cpO3JldHVybiBlP2VbMF0uc3Vic3RyKDEpOnQucmVwbGFjZShcInd3dy5cIixcIlwiKX0sYT11KGIpLHM9W10uY29uY2F0KG8oZS5rZXlzKCkpKSxjPXIubWF0Y2goL1suYS16QS16MC05LV9dKy9nKVsxXS5yZXBsYWNlKFwid3d3LlwiLFwiXCIpLGg9aShhLmhvc3RuYW1lKSxkPWZ1bmN0aW9uKCl7cmV0dXJuXCIvXCI9PWEucGF0aG5hbWV8fC9cXC8oZGVmYXVsdHxpbmRleHxwb3J0YWwpLlswLTlhLXpBLVpdKyQvLnRlc3QoYS5wYXRobmFtZSl9LGY9ITAscD0hMSxtPXZvaWQgMDt0cnl7Zm9yKHZhciBnLHk9c1tTeW1ib2wuaXRlcmF0b3JdKCk7IShmPShnPXkubmV4dCgpKS5kb25lKTtmPSEwKXt2YXIgdz1nLnZhbHVlLHg9ZS5nZXQodykubmFtZSwkPWkoeCk7dy5zdGFydHNXaXRoKFwiW1svXCIpJiZ3LmVuZHNXaXRoKFwiL11dXCIpJiZuZXcgUmVnRXhwKHcucmVwbGFjZSgvXlxcW1xcW1xcL3xcXC9cXF1cXF0vZyxcIlwiKSkudGVzdChsb2NhdGlvbi5ocmVmKT9uLnB1c2goW3csbChlLmdldCh3KSksdF0pOmQoKXx8dy5lbmRzV2l0aChcIipcIil8fHcucmVwbGFjZSgvXmh0dHBbc10/Oi8sXCJcIikhPXIucmVwbGFjZSgvXmh0dHBbc10/Oi8sXCJcIik/dy5tYXRjaCgvXFwqL2cpJiYxPT13Lm1hdGNoKC9cXCovZykubGVuZ3RoJiYhZCgpJiZ3LmVuZHNXaXRoKFwiKlwiKSYmYy5pbmNsdWRlcygkKSYmaD09JCYmci5pbmNsdWRlcyh4KT9uLnB1c2goW3csbChlLmdldCh3KSksdF0pOnYoYS5vcmlnaW4rYS5wYXRobmFtZSx3KSYmbi5wdXNoKFt3LGwoZS5nZXQodykpLHRdKTpuLnB1c2goW3csbChlLmdldCh3KSksdF0pfX1jYXRjaCh0KXtwPSEwLG09dH1maW5hbGx5e3RyeXshZiYmeS5yZXR1cm4mJnkucmV0dXJuKCl9ZmluYWxseXtpZihwKXRocm93IG19fX1mdW5jdGlvbiBPKHQpe2lmKCF0Lm5hbWV8fCF0LnVybHx8IXQuaW5jbHVkZSlyZXR1cm4tMTtpZigtMT09cyh0LnRpdGxlKVswXXx8LTE9PXModC5pbmNsdWRlKVswXXx8LTE9PXModC5kZXNjKVswXSlyZXR1cm4tMjtpZih0LnBhZ2luZyl7aWYoMiE9dC5wYWdpbmcubGVuZ3RoKXJldHVybi0zO2lmKCF0LnBhZ2luZ1swXS5wcmV2KXJldHVybi00O2lmKCF0LnBhZ2luZ1sxXS5uZXh0KXJldHVybi01O2lmKC0xPT1zKHQucGFnaW5nWzBdLnByZXYpWzBdfHwtMT09cyh0LnBhZ2luZ1sxXS5uZXh0KVswXSlyZXR1cm4tNn1pZih0LmF2YXRhcil7aWYoMiE9dC5hdmF0YXIubGVuZ3RoKXJldHVybi03O2lmKCF0LmF2YXRhclswXS5uYW1lKXJldHVybi04O2lmKCF0LmF2YXRhclsxXS51cmwpcmV0dXJuLTk7aWYoLTE9PXModC5hdmF0YXJbMF0ubmFtZSlbMF18fC0xPT1zKHQuYXZhdGFyWzFdLnVybClbMF0pcmV0dXJuLTEwfXJldHVybiAwfWZ1bmN0aW9uIGoodCl7dmFyIGU9dC5yZXBsYWNlKCc8ZGl2IGlkPVwicmVhZGFiaWxpdHktcGFnZS0xXCIgY2xhc3M9XCJwYWdlXCI+JyxcIlwiKSxyPSQoZSlbMF0sbj1yLm91dGVySFRNTC5yZXBsYWNlKHIuaW5uZXJIVE1MLFwiXCIpLGk9JChuKVswXSxhPWkudGFnTmFtZS50b0xvd2VyQ2FzZSgpLG89aS5jbGFzc05hbWU7cmV0dXJue2lkOmkuaWQsY2xzOm8sdGFnOmF9fWZ1bmN0aW9uIFModCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOlwidGV4dFwiLHI9JChcImh0bWxcIik7aWYoaCh0KSl7dmFyIG49ZCh0KSxpPWEobiwyKSxvPWlbMF0sbD1pWzFdOzA9PWw/dD1vOjM9PWw/dD1NKHIuZmluZChvKSk6ND09bCYmKHQ9by5odG1sKCkpfWVsc2VcImh0bWxcIj09ZT90PU0oci5maW5kKHQpKTpcIm11bHRpXCI9PWV8fCh0PXIuZmluZCh0KS50ZXh0KCkudHJpbSgpKTtyZXR1cm4gdH1mdW5jdGlvbiBNKHQpe3ZhciBlPVwiXCI7c3dpdGNoKHQubGVuZ3RoKXtjYXNlIDA6ZT1cIjxzci1yZC1jb250ZW50LWVycm9yPjwvc3ItcmQtY29udGVudC1lcnJvcj5cIjticmVhaztjYXNlIDE6ZT10Lmh0bWwoKS50cmltKCk7YnJlYWs7ZGVmYXVsdDplPXQubWFwKGZ1bmN0aW9uKHQsZSl7cmV0dXJuICQoZSkuaHRtbCgpfSkuZ2V0KCkuam9pbihcIjxicj5cIil9cmV0dXJuIGV9cmV0dXJuIGZ1bmN0aW9uKHIpe2Z1bmN0aW9uIG8oZSl7dCh0aGlzLG8pO3ZhciByPWkodGhpcywoby5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihvKSkuY2FsbCh0aGlzLGUpKTtyZXR1cm4gci52ZXJzaW9uPVwiMC4wLjQgYnVpbGQgMDExMVwiLHIub3JnX3VybD1sb2NhdGlvbi5ocmVmLHIuaHRtbD17fSxyLnBsdWdpbj17fSxyLnB1cmU9ITEsci5jbGVhbnVwPSExLHJ9cmV0dXJuIGZ1bmN0aW9uKHQsZSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSYmbnVsbCE9PWUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIrdHlwZW9mIGUpO3QucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZSYmZS5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTp0LGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLGUmJihPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKHQsZSk6dC5fX3Byb3RvX189ZSl9KG8sdyksZShvLFt7a2V5OlwiRXhpc3RcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLm9yZ191cmw9PWxvY2F0aW9uLmhyZWZ9fSx7a2V5OlwiQWRkUGx1Z2luXCIsdmFsdWU6ZnVuY3Rpb24odCl7dGhpcy5wbHVnaW49e21pbmltYXRjaDp0Lm1pbmltYXRjaCxwYW5ndTp0LnBhbmd1LGJlYXV0aWZ5OnQuYmVhdXRpZnksc3R5bGVzaGVldDp0LnN0eWxlLHJkYWJpbGl0eTp0LnJkYWJpbGl0eSxtYXJrZG93bjp0Lm1hcmtkb3dufSxuKG8ucHJvdG90eXBlLl9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKG8ucHJvdG90eXBlKSxcIlNldE1pbmltYXRjaFwiLHRoaXMpLmNhbGwodGhpcyx0aGlzLnBsdWdpbi5taW5pbWF0Y2gpLG4oby5wcm90b3R5cGUuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2Yoby5wcm90b3R5cGUpLFwiU2V0UmRhYmlsaXR5XCIsdGhpcykuY2FsbCh0aGlzLHRoaXMucGx1Z2luLnJkYWJpbGl0eSksbihvLnByb3RvdHlwZS5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihvLnByb3RvdHlwZSksXCJTZXRNYXJrZG93blwiLHRoaXMpLmNhbGwodGhpcyx0aGlzLnBsdWdpbi5tYXJrZG93bil9fSx7a2V5OlwiUmVhZE1vZGVcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0LGUscixuLGk7dGhpcy5odG1sPSh0PXRoaXMuY3VycmVudC5zaXRlLGU9bCh0KSxyPWMoXCJcIj09dC50aXRsZT9cIjx0aXRsZT5cIjp0LnRpdGxlKSxuPWModC5kZXNjKSxpPWModC5pbmNsdWRlKSxlLnRpdGxlPVwiXCI9PXQudGl0bGV8fFwiPHRpdGxlPlwiPT10LnRpdGxlPyQoXCJoZWFkIHRpdGxlXCIpLnRleHQoKTpTKHIpLGUuZGVzYz1mdW5jdGlvbih0KXtpZih2b2lkIDA9PXQpcmV0dXJuIHQ7dmFyIGU9dC5sZW5ndGgscj10LmluZGV4T2YoXCLjgIJcIikrMTtyZXR1cm4gZT4xMDAmJih0PXI+MD90LnN1YnN0cigwLHIpOnQuc3Vic3RyKDAsMTAxKStcIi4uLi4uLlwiKSx0fSh0LmV4Y2VycHQ/dC5leGNlcnB0OlMobikpLGUuaW5jbHVkZT1cIlwiPT10LmluY2x1ZGUmJlwiXCIhPXQuaHRtbD90Lmh0bWw6UyhpLFwiaHRtbFwiKSxlLmF2YXRhciYmZS5hdmF0YXIubGVuZ3RoPjAmJlwiXCI9PWUuYXZhdGFyWzBdLm5hbWUmJmRlbGV0ZSBlLmF2YXRhcixlLnBhZ2luZyYmZS5wYWdpbmcubGVuZ3RoPjAmJlwiXCI9PWUucGFnaW5nWzBdLnByZXYmJmRlbGV0ZSBlLnBhZ2luZyxlLmF2YXRhciYmZS5hdmF0YXIuZm9yRWFjaChmdW5jdGlvbih0KXt2YXIgZT1PYmplY3Qua2V5cyh0KS5qb2luKCkscj10W2VdO3RbZV09UyhjKHIpLFwiaHRtbFwiKX0pLGUucGFnaW5nJiZlLnBhZ2luZy5mb3JFYWNoKGZ1bmN0aW9uKHQpe3ZhciBlPU9iamVjdC5rZXlzKHQpLmpvaW4oKSxyPXRbZV07dFtlXT1TKGMocikpfSksZSl9fSx7a2V5OlwiVGVtcE1vZGVcIix2YWx1ZTpmdW5jdGlvbih0LGUpe3RoaXMuc3RhdGU9XCJ0ZW1wXCIsdGhpcy5kb209ZSx0aGlzLk5ld3NpdGUodCxlLm91dGVySFRNTCl9fSx7a2V5OlwiR2V0RG9tXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXtyZXR1cm4gUyhjKHQpLGUpfX0se2tleTpcIkluY2x1ZGVcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXMuY3VycmVudC5zaXRlLmluY2x1ZGUsZT1bXSxyPWModCk7dHJ5e2lmKGgocikpe3ZhciBuPWQodCksaT1hKG4sMiksbz1pWzBdLGw9aVsxXTswPT1sPyh0PXQucmVwbGFjZSgvXFxbXFxbe1xcJFxcKHx9XFxdXFxdfFxcKS5odG1sXFwoXFwpL2csXCJcIiksZT0kKGQoXCJbW1tcIit0K1wiXV1dXCIpWzBdKSk6Mz09bCYmKGU9byl9ZWxzZSByJiYoZT0kKFwiYm9keVwiKS5maW5kKHIpKX1jYXRjaCh0KXt9cmV0dXJuIGV9fSx7a2V5OlwiRXhjbHVkZVwiLHZhbHVlOmZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbih0LGUpe3ZhciByPVtdLG49XCJcIixpPSEwLG89ITEsbD12b2lkIDA7dHJ5e2Zvcih2YXIgdSxzPWVbU3ltYm9sLml0ZXJhdG9yXSgpOyEoaT0odT1zLm5leHQoKSkuZG9uZSk7aT0hMCl7dmFyIGY9dS52YWx1ZTtpZihoKGYpKXt2YXIgcD1kKGYpLG09YShwLDIpLHY9bVswXSxnPW1bMV07aWYoMT09ZyluPXY7ZWxzZSBpZigyPT1nKXt2YXIgeT10Lmh0bWwoKS5tYXRjaChuZXcgUmVnRXhwKHYsXCJnXCIpKTtpZih5JiZ5Lmxlbmd0aD4wKXt2YXIgYj15LmpvaW4oXCJcIik7bj1cIipbXCIrYitcIl1cIn1lbHNlIG49dm9pZCAwfWVsc2UgMz09Zz92LnJlbW92ZSgpOjQ9PWcmJnYucmVtb3ZlKCl9ZWxzZSBuPWMoZik7biYmci5wdXNoKG4pfX1jYXRjaCh0KXtvPSEwLGw9dH1maW5hbGx5e3RyeXshaSYmcy5yZXR1cm4mJnMucmV0dXJuKCl9ZmluYWxseXtpZihvKXRocm93IGx9fXJldHVybiByLmpvaW4oXCIsXCIpfSh0LHRoaXMuY3VycmVudC5zaXRlLmV4Y2x1ZGUpfX0se2tleTpcIkJlYXV0aWZ5XCIsdmFsdWU6ZnVuY3Rpb24odCl7MCE9dC5jaGlsZHJlbigpLmxlbmd0aCYmdGhpcy5wbHVnaW4uYmVhdXRpZnkmJih0aGlzLnBsdWdpbi5iZWF1dGlmeS5iZWZvcmUodGhpcy5jdXJyZW50LnNpdGUubmFtZSx0KSx0aGlzLmNsZWFudXAmJnRoaXMucGx1Z2luLmJlYXV0aWZ5LmNsZWFuSFRNTCh0LHRoaXMucHVyZSx0aGlzLmlzTWF0aEpheCgpKSx0aGlzLnBsdWdpbi5iZWF1dGlmeS5zcGVjYmVhdXRpZnkodGhpcy5jdXJyZW50LnNpdGUubmFtZSx0KSx0aGlzLnBsdWdpbi5iZWF1dGlmeS5yZW1vdmVTcGFyZVRhZyh0aGlzLmN1cnJlbnQuc2l0ZS5uYW1lLHQpLHRoaXMucGx1Z2luLmJlYXV0aWZ5Lmh0bWxiZWF1dGlmeSh0KSx0aGlzLnBsdWdpbi5iZWF1dGlmeS5jb21tYmVhdXRpZnkodGhpcy5jdXJyZW50LnNpdGUubmFtZSx0KSl9fSx7a2V5OlwiRm9ybWF0XCIsdmFsdWU6ZnVuY3Rpb24odCl7dGhpcy5wbHVnaW4ucGFuZ3UmJnRoaXMucGx1Z2luLnBhbmd1LnNwYWNpbmdFbGVtZW50QnlDbGFzc05hbWUodCl9fSx7a2V5OlwiVXRpbHNcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybntkb20yWHBhdGg6Zix4UGF0aDJEb206cH19fV0pLG99KCl9KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy92ZW5kZXIvcHVyZWFkL3B1cmVhZC5taW4uanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ })

});